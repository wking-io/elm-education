-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.InputObject exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildExerciseWhereInput : (ExerciseWhereInputOptionalFields -> ExerciseWhereInputOptionalFields) -> ExerciseWhereInput
buildExerciseWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, views = Absent, views_not = Absent, views_in = Absent, views_not_in = Absent, views_lt = Absent, views_lte = Absent, views_gt = Absent, views_gte = Absent, completed = Absent, completed_not = Absent, completed_in = Absent, completed_not_in = Absent, completed_lt = Absent, completed_lte = Absent, completed_gt = Absent, completed_gte = Absent, game = Absent, owner = Absent }
    in
    ExerciseWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, views = optionals.views, views_not = optionals.views_not, views_in = optionals.views_in, views_not_in = optionals.views_not_in, views_lt = optionals.views_lt, views_lte = optionals.views_lte, views_gt = optionals.views_gt, views_gte = optionals.views_gte, completed = optionals.completed, completed_not = optionals.completed_not, completed_in = optionals.completed_in, completed_not_in = optionals.completed_not_in, completed_lt = optionals.completed_lt, completed_lte = optionals.completed_lte, completed_gt = optionals.completed_gt, completed_gte = optionals.completed_gte, game = optionals.game, owner = optionals.owner }


type alias ExerciseWhereInputOptionalFields =
    { and : OptionalArgument (List ExerciseWhereInput), or : OptionalArgument (List ExerciseWhereInput), not : OptionalArgument (List ExerciseWhereInput), id : OptionalArgument Api.Scalar.Id, id_not : OptionalArgument Api.Scalar.Id, id_in : OptionalArgument (List Api.Scalar.Id), id_not_in : OptionalArgument (List Api.Scalar.Id), id_lt : OptionalArgument Api.Scalar.Id, id_lte : OptionalArgument Api.Scalar.Id, id_gt : OptionalArgument Api.Scalar.Id, id_gte : OptionalArgument Api.Scalar.Id, id_contains : OptionalArgument Api.Scalar.Id, id_not_contains : OptionalArgument Api.Scalar.Id, id_starts_with : OptionalArgument Api.Scalar.Id, id_not_starts_with : OptionalArgument Api.Scalar.Id, id_ends_with : OptionalArgument Api.Scalar.Id, id_not_ends_with : OptionalArgument Api.Scalar.Id, views : OptionalArgument Int, views_not : OptionalArgument Int, views_in : OptionalArgument (List Int), views_not_in : OptionalArgument (List Int), views_lt : OptionalArgument Int, views_lte : OptionalArgument Int, views_gt : OptionalArgument Int, views_gte : OptionalArgument Int, completed : OptionalArgument Int, completed_not : OptionalArgument Int, completed_in : OptionalArgument (List Int), completed_not_in : OptionalArgument (List Int), completed_lt : OptionalArgument Int, completed_lte : OptionalArgument Int, completed_gt : OptionalArgument Int, completed_gte : OptionalArgument Int, game : OptionalArgument GameWhereInput, owner : OptionalArgument UserWhereInput }


{-| Type alias for the `ExerciseWhereInput` attributes. Note that this type
needs to use the `ExerciseWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias ExerciseWhereInputRaw =
    { and : OptionalArgument (List ExerciseWhereInput), or : OptionalArgument (List ExerciseWhereInput), not : OptionalArgument (List ExerciseWhereInput), id : OptionalArgument Api.Scalar.Id, id_not : OptionalArgument Api.Scalar.Id, id_in : OptionalArgument (List Api.Scalar.Id), id_not_in : OptionalArgument (List Api.Scalar.Id), id_lt : OptionalArgument Api.Scalar.Id, id_lte : OptionalArgument Api.Scalar.Id, id_gt : OptionalArgument Api.Scalar.Id, id_gte : OptionalArgument Api.Scalar.Id, id_contains : OptionalArgument Api.Scalar.Id, id_not_contains : OptionalArgument Api.Scalar.Id, id_starts_with : OptionalArgument Api.Scalar.Id, id_not_starts_with : OptionalArgument Api.Scalar.Id, id_ends_with : OptionalArgument Api.Scalar.Id, id_not_ends_with : OptionalArgument Api.Scalar.Id, views : OptionalArgument Int, views_not : OptionalArgument Int, views_in : OptionalArgument (List Int), views_not_in : OptionalArgument (List Int), views_lt : OptionalArgument Int, views_lte : OptionalArgument Int, views_gt : OptionalArgument Int, views_gte : OptionalArgument Int, completed : OptionalArgument Int, completed_not : OptionalArgument Int, completed_in : OptionalArgument (List Int), completed_not_in : OptionalArgument (List Int), completed_lt : OptionalArgument Int, completed_lte : OptionalArgument Int, completed_gt : OptionalArgument Int, completed_gte : OptionalArgument Int, game : OptionalArgument GameWhereInput, owner : OptionalArgument UserWhereInput }


{-| Type for the ExerciseWhereInput input object.
-}
type ExerciseWhereInput
    = ExerciseWhereInput ExerciseWhereInputRaw


{-| Encode a ExerciseWhereInput into a value that can be used as an argument.
-}
encodeExerciseWhereInput : ExerciseWhereInput -> Value
encodeExerciseWhereInput (ExerciseWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeExerciseWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeExerciseWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeExerciseWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "views", Encode.int |> Encode.optional input.views ), ( "views_not", Encode.int |> Encode.optional input.views_not ), ( "views_in", (Encode.int |> Encode.list) |> Encode.optional input.views_in ), ( "views_not_in", (Encode.int |> Encode.list) |> Encode.optional input.views_not_in ), ( "views_lt", Encode.int |> Encode.optional input.views_lt ), ( "views_lte", Encode.int |> Encode.optional input.views_lte ), ( "views_gt", Encode.int |> Encode.optional input.views_gt ), ( "views_gte", Encode.int |> Encode.optional input.views_gte ), ( "completed", Encode.int |> Encode.optional input.completed ), ( "completed_not", Encode.int |> Encode.optional input.completed_not ), ( "completed_in", (Encode.int |> Encode.list) |> Encode.optional input.completed_in ), ( "completed_not_in", (Encode.int |> Encode.list) |> Encode.optional input.completed_not_in ), ( "completed_lt", Encode.int |> Encode.optional input.completed_lt ), ( "completed_lte", Encode.int |> Encode.optional input.completed_lte ), ( "completed_gt", Encode.int |> Encode.optional input.completed_gt ), ( "completed_gte", Encode.int |> Encode.optional input.completed_gte ), ( "game", encodeGameWhereInput |> Encode.optional input.game ), ( "owner", encodeUserWhereInput |> Encode.optional input.owner ) ]


buildGameWhereInput : (GameWhereInputOptionalFields -> GameWhereInputOptionalFields) -> GameWhereInput
buildGameWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, description = Absent, description_not = Absent, description_in = Absent, description_not_in = Absent, description_lt = Absent, description_lte = Absent, description_gt = Absent, description_gte = Absent, description_contains = Absent, description_not_contains = Absent, description_starts_with = Absent, description_not_starts_with = Absent, description_ends_with = Absent, description_not_ends_with = Absent, slug = Absent, slug_not = Absent, slug_in = Absent, slug_not_in = Absent, slug_lt = Absent, slug_lte = Absent, slug_gt = Absent, slug_gte = Absent, slug_contains = Absent, slug_not_contains = Absent, slug_starts_with = Absent, slug_not_starts_with = Absent, slug_ends_with = Absent, slug_not_ends_with = Absent }
    in
    GameWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, description = optionals.description, description_not = optionals.description_not, description_in = optionals.description_in, description_not_in = optionals.description_not_in, description_lt = optionals.description_lt, description_lte = optionals.description_lte, description_gt = optionals.description_gt, description_gte = optionals.description_gte, description_contains = optionals.description_contains, description_not_contains = optionals.description_not_contains, description_starts_with = optionals.description_starts_with, description_not_starts_with = optionals.description_not_starts_with, description_ends_with = optionals.description_ends_with, description_not_ends_with = optionals.description_not_ends_with, slug = optionals.slug, slug_not = optionals.slug_not, slug_in = optionals.slug_in, slug_not_in = optionals.slug_not_in, slug_lt = optionals.slug_lt, slug_lte = optionals.slug_lte, slug_gt = optionals.slug_gt, slug_gte = optionals.slug_gte, slug_contains = optionals.slug_contains, slug_not_contains = optionals.slug_not_contains, slug_starts_with = optionals.slug_starts_with, slug_not_starts_with = optionals.slug_not_starts_with, slug_ends_with = optionals.slug_ends_with, slug_not_ends_with = optionals.slug_not_ends_with }


type alias GameWhereInputOptionalFields =
    { and : OptionalArgument (List GameWhereInput), or : OptionalArgument (List GameWhereInput), not : OptionalArgument (List GameWhereInput), id : OptionalArgument Api.Scalar.Id, id_not : OptionalArgument Api.Scalar.Id, id_in : OptionalArgument (List Api.Scalar.Id), id_not_in : OptionalArgument (List Api.Scalar.Id), id_lt : OptionalArgument Api.Scalar.Id, id_lte : OptionalArgument Api.Scalar.Id, id_gt : OptionalArgument Api.Scalar.Id, id_gte : OptionalArgument Api.Scalar.Id, id_contains : OptionalArgument Api.Scalar.Id, id_not_contains : OptionalArgument Api.Scalar.Id, id_starts_with : OptionalArgument Api.Scalar.Id, id_not_starts_with : OptionalArgument Api.Scalar.Id, id_ends_with : OptionalArgument Api.Scalar.Id, id_not_ends_with : OptionalArgument Api.Scalar.Id, createdAt : OptionalArgument Api.Scalar.DateTime, createdAt_not : OptionalArgument Api.Scalar.DateTime, createdAt_in : OptionalArgument (List Api.Scalar.DateTime), createdAt_not_in : OptionalArgument (List Api.Scalar.DateTime), createdAt_lt : OptionalArgument Api.Scalar.DateTime, createdAt_lte : OptionalArgument Api.Scalar.DateTime, createdAt_gt : OptionalArgument Api.Scalar.DateTime, createdAt_gte : OptionalArgument Api.Scalar.DateTime, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, description : OptionalArgument String, description_not : OptionalArgument String, description_in : OptionalArgument (List String), description_not_in : OptionalArgument (List String), description_lt : OptionalArgument String, description_lte : OptionalArgument String, description_gt : OptionalArgument String, description_gte : OptionalArgument String, description_contains : OptionalArgument String, description_not_contains : OptionalArgument String, description_starts_with : OptionalArgument String, description_not_starts_with : OptionalArgument String, description_ends_with : OptionalArgument String, description_not_ends_with : OptionalArgument String, slug : OptionalArgument String, slug_not : OptionalArgument String, slug_in : OptionalArgument (List String), slug_not_in : OptionalArgument (List String), slug_lt : OptionalArgument String, slug_lte : OptionalArgument String, slug_gt : OptionalArgument String, slug_gte : OptionalArgument String, slug_contains : OptionalArgument String, slug_not_contains : OptionalArgument String, slug_starts_with : OptionalArgument String, slug_not_starts_with : OptionalArgument String, slug_ends_with : OptionalArgument String, slug_not_ends_with : OptionalArgument String }


{-| Type alias for the `GameWhereInput` attributes. Note that this type
needs to use the `GameWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias GameWhereInputRaw =
    { and : OptionalArgument (List GameWhereInput), or : OptionalArgument (List GameWhereInput), not : OptionalArgument (List GameWhereInput), id : OptionalArgument Api.Scalar.Id, id_not : OptionalArgument Api.Scalar.Id, id_in : OptionalArgument (List Api.Scalar.Id), id_not_in : OptionalArgument (List Api.Scalar.Id), id_lt : OptionalArgument Api.Scalar.Id, id_lte : OptionalArgument Api.Scalar.Id, id_gt : OptionalArgument Api.Scalar.Id, id_gte : OptionalArgument Api.Scalar.Id, id_contains : OptionalArgument Api.Scalar.Id, id_not_contains : OptionalArgument Api.Scalar.Id, id_starts_with : OptionalArgument Api.Scalar.Id, id_not_starts_with : OptionalArgument Api.Scalar.Id, id_ends_with : OptionalArgument Api.Scalar.Id, id_not_ends_with : OptionalArgument Api.Scalar.Id, createdAt : OptionalArgument Api.Scalar.DateTime, createdAt_not : OptionalArgument Api.Scalar.DateTime, createdAt_in : OptionalArgument (List Api.Scalar.DateTime), createdAt_not_in : OptionalArgument (List Api.Scalar.DateTime), createdAt_lt : OptionalArgument Api.Scalar.DateTime, createdAt_lte : OptionalArgument Api.Scalar.DateTime, createdAt_gt : OptionalArgument Api.Scalar.DateTime, createdAt_gte : OptionalArgument Api.Scalar.DateTime, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, description : OptionalArgument String, description_not : OptionalArgument String, description_in : OptionalArgument (List String), description_not_in : OptionalArgument (List String), description_lt : OptionalArgument String, description_lte : OptionalArgument String, description_gt : OptionalArgument String, description_gte : OptionalArgument String, description_contains : OptionalArgument String, description_not_contains : OptionalArgument String, description_starts_with : OptionalArgument String, description_not_starts_with : OptionalArgument String, description_ends_with : OptionalArgument String, description_not_ends_with : OptionalArgument String, slug : OptionalArgument String, slug_not : OptionalArgument String, slug_in : OptionalArgument (List String), slug_not_in : OptionalArgument (List String), slug_lt : OptionalArgument String, slug_lte : OptionalArgument String, slug_gt : OptionalArgument String, slug_gte : OptionalArgument String, slug_contains : OptionalArgument String, slug_not_contains : OptionalArgument String, slug_starts_with : OptionalArgument String, slug_not_starts_with : OptionalArgument String, slug_ends_with : OptionalArgument String, slug_not_ends_with : OptionalArgument String }


{-| Type for the GameWhereInput input object.
-}
type GameWhereInput
    = GameWhereInput GameWhereInputRaw


{-| Encode a GameWhereInput into a value that can be used as an argument.
-}
encodeGameWhereInput : GameWhereInput -> Value
encodeGameWhereInput (GameWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeGameWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeGameWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeGameWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(Api.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(Api.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(Api.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(Api.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(Api.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(Api.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(Api.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(Api.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "description", Encode.string |> Encode.optional input.description ), ( "description_not", Encode.string |> Encode.optional input.description_not ), ( "description_in", (Encode.string |> Encode.list) |> Encode.optional input.description_in ), ( "description_not_in", (Encode.string |> Encode.list) |> Encode.optional input.description_not_in ), ( "description_lt", Encode.string |> Encode.optional input.description_lt ), ( "description_lte", Encode.string |> Encode.optional input.description_lte ), ( "description_gt", Encode.string |> Encode.optional input.description_gt ), ( "description_gte", Encode.string |> Encode.optional input.description_gte ), ( "description_contains", Encode.string |> Encode.optional input.description_contains ), ( "description_not_contains", Encode.string |> Encode.optional input.description_not_contains ), ( "description_starts_with", Encode.string |> Encode.optional input.description_starts_with ), ( "description_not_starts_with", Encode.string |> Encode.optional input.description_not_starts_with ), ( "description_ends_with", Encode.string |> Encode.optional input.description_ends_with ), ( "description_not_ends_with", Encode.string |> Encode.optional input.description_not_ends_with ), ( "slug", Encode.string |> Encode.optional input.slug ), ( "slug_not", Encode.string |> Encode.optional input.slug_not ), ( "slug_in", (Encode.string |> Encode.list) |> Encode.optional input.slug_in ), ( "slug_not_in", (Encode.string |> Encode.list) |> Encode.optional input.slug_not_in ), ( "slug_lt", Encode.string |> Encode.optional input.slug_lt ), ( "slug_lte", Encode.string |> Encode.optional input.slug_lte ), ( "slug_gt", Encode.string |> Encode.optional input.slug_gt ), ( "slug_gte", Encode.string |> Encode.optional input.slug_gte ), ( "slug_contains", Encode.string |> Encode.optional input.slug_contains ), ( "slug_not_contains", Encode.string |> Encode.optional input.slug_not_contains ), ( "slug_starts_with", Encode.string |> Encode.optional input.slug_starts_with ), ( "slug_not_starts_with", Encode.string |> Encode.optional input.slug_not_starts_with ), ( "slug_ends_with", Encode.string |> Encode.optional input.slug_ends_with ), ( "slug_not_ends_with", Encode.string |> Encode.optional input.slug_not_ends_with ) ]


buildUserWhereInput : (UserWhereInputOptionalFields -> UserWhereInputOptionalFields) -> UserWhereInput
buildUserWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, email = Absent, email_not = Absent, email_in = Absent, email_not_in = Absent, email_lt = Absent, email_lte = Absent, email_gt = Absent, email_gte = Absent, email_contains = Absent, email_not_contains = Absent, email_starts_with = Absent, email_not_starts_with = Absent, email_ends_with = Absent, email_not_ends_with = Absent, password = Absent, password_not = Absent, password_in = Absent, password_not_in = Absent, password_lt = Absent, password_lte = Absent, password_gt = Absent, password_gte = Absent, password_contains = Absent, password_not_contains = Absent, password_starts_with = Absent, password_not_starts_with = Absent, password_ends_with = Absent, password_not_ends_with = Absent, exercises_every = Absent, exercises_some = Absent, exercises_none = Absent }
    in
    UserWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, email = optionals.email, email_not = optionals.email_not, email_in = optionals.email_in, email_not_in = optionals.email_not_in, email_lt = optionals.email_lt, email_lte = optionals.email_lte, email_gt = optionals.email_gt, email_gte = optionals.email_gte, email_contains = optionals.email_contains, email_not_contains = optionals.email_not_contains, email_starts_with = optionals.email_starts_with, email_not_starts_with = optionals.email_not_starts_with, email_ends_with = optionals.email_ends_with, email_not_ends_with = optionals.email_not_ends_with, password = optionals.password, password_not = optionals.password_not, password_in = optionals.password_in, password_not_in = optionals.password_not_in, password_lt = optionals.password_lt, password_lte = optionals.password_lte, password_gt = optionals.password_gt, password_gte = optionals.password_gte, password_contains = optionals.password_contains, password_not_contains = optionals.password_not_contains, password_starts_with = optionals.password_starts_with, password_not_starts_with = optionals.password_not_starts_with, password_ends_with = optionals.password_ends_with, password_not_ends_with = optionals.password_not_ends_with, exercises_every = optionals.exercises_every, exercises_some = optionals.exercises_some, exercises_none = optionals.exercises_none }


type alias UserWhereInputOptionalFields =
    { and : OptionalArgument (List UserWhereInput), or : OptionalArgument (List UserWhereInput), not : OptionalArgument (List UserWhereInput), id : OptionalArgument Api.Scalar.Id, id_not : OptionalArgument Api.Scalar.Id, id_in : OptionalArgument (List Api.Scalar.Id), id_not_in : OptionalArgument (List Api.Scalar.Id), id_lt : OptionalArgument Api.Scalar.Id, id_lte : OptionalArgument Api.Scalar.Id, id_gt : OptionalArgument Api.Scalar.Id, id_gte : OptionalArgument Api.Scalar.Id, id_contains : OptionalArgument Api.Scalar.Id, id_not_contains : OptionalArgument Api.Scalar.Id, id_starts_with : OptionalArgument Api.Scalar.Id, id_not_starts_with : OptionalArgument Api.Scalar.Id, id_ends_with : OptionalArgument Api.Scalar.Id, id_not_ends_with : OptionalArgument Api.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, email : OptionalArgument String, email_not : OptionalArgument String, email_in : OptionalArgument (List String), email_not_in : OptionalArgument (List String), email_lt : OptionalArgument String, email_lte : OptionalArgument String, email_gt : OptionalArgument String, email_gte : OptionalArgument String, email_contains : OptionalArgument String, email_not_contains : OptionalArgument String, email_starts_with : OptionalArgument String, email_not_starts_with : OptionalArgument String, email_ends_with : OptionalArgument String, email_not_ends_with : OptionalArgument String, password : OptionalArgument String, password_not : OptionalArgument String, password_in : OptionalArgument (List String), password_not_in : OptionalArgument (List String), password_lt : OptionalArgument String, password_lte : OptionalArgument String, password_gt : OptionalArgument String, password_gte : OptionalArgument String, password_contains : OptionalArgument String, password_not_contains : OptionalArgument String, password_starts_with : OptionalArgument String, password_not_starts_with : OptionalArgument String, password_ends_with : OptionalArgument String, password_not_ends_with : OptionalArgument String, exercises_every : OptionalArgument ExerciseWhereInput, exercises_some : OptionalArgument ExerciseWhereInput, exercises_none : OptionalArgument ExerciseWhereInput }


{-| Type alias for the `UserWhereInput` attributes. Note that this type
needs to use the `UserWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserWhereInputRaw =
    { and : OptionalArgument (List UserWhereInput), or : OptionalArgument (List UserWhereInput), not : OptionalArgument (List UserWhereInput), id : OptionalArgument Api.Scalar.Id, id_not : OptionalArgument Api.Scalar.Id, id_in : OptionalArgument (List Api.Scalar.Id), id_not_in : OptionalArgument (List Api.Scalar.Id), id_lt : OptionalArgument Api.Scalar.Id, id_lte : OptionalArgument Api.Scalar.Id, id_gt : OptionalArgument Api.Scalar.Id, id_gte : OptionalArgument Api.Scalar.Id, id_contains : OptionalArgument Api.Scalar.Id, id_not_contains : OptionalArgument Api.Scalar.Id, id_starts_with : OptionalArgument Api.Scalar.Id, id_not_starts_with : OptionalArgument Api.Scalar.Id, id_ends_with : OptionalArgument Api.Scalar.Id, id_not_ends_with : OptionalArgument Api.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, email : OptionalArgument String, email_not : OptionalArgument String, email_in : OptionalArgument (List String), email_not_in : OptionalArgument (List String), email_lt : OptionalArgument String, email_lte : OptionalArgument String, email_gt : OptionalArgument String, email_gte : OptionalArgument String, email_contains : OptionalArgument String, email_not_contains : OptionalArgument String, email_starts_with : OptionalArgument String, email_not_starts_with : OptionalArgument String, email_ends_with : OptionalArgument String, email_not_ends_with : OptionalArgument String, password : OptionalArgument String, password_not : OptionalArgument String, password_in : OptionalArgument (List String), password_not_in : OptionalArgument (List String), password_lt : OptionalArgument String, password_lte : OptionalArgument String, password_gt : OptionalArgument String, password_gte : OptionalArgument String, password_contains : OptionalArgument String, password_not_contains : OptionalArgument String, password_starts_with : OptionalArgument String, password_not_starts_with : OptionalArgument String, password_ends_with : OptionalArgument String, password_not_ends_with : OptionalArgument String, exercises_every : OptionalArgument ExerciseWhereInput, exercises_some : OptionalArgument ExerciseWhereInput, exercises_none : OptionalArgument ExerciseWhereInput }


{-| Type for the UserWhereInput input object.
-}
type UserWhereInput
    = UserWhereInput UserWhereInputRaw


{-| Encode a UserWhereInput into a value that can be used as an argument.
-}
encodeUserWhereInput : UserWhereInput -> Value
encodeUserWhereInput (UserWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeUserWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeUserWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeUserWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(Api.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "email", Encode.string |> Encode.optional input.email ), ( "email_not", Encode.string |> Encode.optional input.email_not ), ( "email_in", (Encode.string |> Encode.list) |> Encode.optional input.email_in ), ( "email_not_in", (Encode.string |> Encode.list) |> Encode.optional input.email_not_in ), ( "email_lt", Encode.string |> Encode.optional input.email_lt ), ( "email_lte", Encode.string |> Encode.optional input.email_lte ), ( "email_gt", Encode.string |> Encode.optional input.email_gt ), ( "email_gte", Encode.string |> Encode.optional input.email_gte ), ( "email_contains", Encode.string |> Encode.optional input.email_contains ), ( "email_not_contains", Encode.string |> Encode.optional input.email_not_contains ), ( "email_starts_with", Encode.string |> Encode.optional input.email_starts_with ), ( "email_not_starts_with", Encode.string |> Encode.optional input.email_not_starts_with ), ( "email_ends_with", Encode.string |> Encode.optional input.email_ends_with ), ( "email_not_ends_with", Encode.string |> Encode.optional input.email_not_ends_with ), ( "password", Encode.string |> Encode.optional input.password ), ( "password_not", Encode.string |> Encode.optional input.password_not ), ( "password_in", (Encode.string |> Encode.list) |> Encode.optional input.password_in ), ( "password_not_in", (Encode.string |> Encode.list) |> Encode.optional input.password_not_in ), ( "password_lt", Encode.string |> Encode.optional input.password_lt ), ( "password_lte", Encode.string |> Encode.optional input.password_lte ), ( "password_gt", Encode.string |> Encode.optional input.password_gt ), ( "password_gte", Encode.string |> Encode.optional input.password_gte ), ( "password_contains", Encode.string |> Encode.optional input.password_contains ), ( "password_not_contains", Encode.string |> Encode.optional input.password_not_contains ), ( "password_starts_with", Encode.string |> Encode.optional input.password_starts_with ), ( "password_not_starts_with", Encode.string |> Encode.optional input.password_not_starts_with ), ( "password_ends_with", Encode.string |> Encode.optional input.password_ends_with ), ( "password_not_ends_with", Encode.string |> Encode.optional input.password_not_ends_with ), ( "exercises_every", encodeExerciseWhereInput |> Encode.optional input.exercises_every ), ( "exercises_some", encodeExerciseWhereInput |> Encode.optional input.exercises_some ), ( "exercises_none", encodeExerciseWhereInput |> Encode.optional input.exercises_none ) ]

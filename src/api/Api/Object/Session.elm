-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Object.Session exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Api.Object.Session
selection constructor =
    Object.selection constructor


{-| -}
id : Field Api.Scalar.Id Api.Object.Session
id =
    Object.fieldDecoder "id" [] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.Id)


{-| -}
name : Field String Api.Object.Session
name =
    Object.fieldDecoder "name" [] Decode.string


{-| -}
createdAt : Field Api.Scalar.DateTime Api.Object.Session
createdAt =
    Object.fieldDecoder "createdAt" [] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.DateTime)


{-| -}
updatedAt : Field Api.Scalar.DateTime Api.Object.Session
updatedAt =
    Object.fieldDecoder "updatedAt" [] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.DateTime)


{-| -}
complete : Field Bool Api.Object.Session
complete =
    Object.fieldDecoder "complete" [] Decode.bool


{-| -}
completedAt : Field (Maybe Api.Scalar.DateTime) Api.Object.Session
completedAt =
    Object.fieldDecoder "completedAt" [] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.DateTime |> Decode.nullable)


type alias GameOptionalArguments =
    { where_ : OptionalArgument Api.InputObject.GameWhereInput }


{-|

  - where_ -

-}
game : (GameOptionalArguments -> GameOptionalArguments) -> SelectionSet decodesTo Api.Object.Game -> Field decodesTo Api.Object.Session
game fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeGameWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionField "game" optionalArgs object identity

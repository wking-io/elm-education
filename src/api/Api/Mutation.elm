-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Mutation exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootMutation
selection constructor =
    Object.selection constructor


type alias CreateGameRequiredArguments =
    { input : Api.InputObject.GameInput }


{-|

  - input -

-}
createGame : CreateGameRequiredArguments -> SelectionSet decodesTo Api.Object.Game -> Field decodesTo RootMutation
createGame requiredArgs object =
    Object.selectionField "createGame" [ Argument.required "input" requiredArgs.input Api.InputObject.encodeGameInput ] object identity


type alias CreatePatternRequiredArguments =
    { input : Api.InputObject.PatternInput }


{-|

  - input -

-}
createPattern : CreatePatternRequiredArguments -> SelectionSet decodesTo Api.Object.Pattern -> Field decodesTo RootMutation
createPattern requiredArgs object =
    Object.selectionField "createPattern" [ Argument.required "input" requiredArgs.input Api.InputObject.encodePatternInput ] object identity


type alias CreateSessionRequiredArguments =
    { input : Api.InputObject.SessionInput }


{-|

  - input -

-}
createSession : CreateSessionRequiredArguments -> SelectionSet decodesTo Api.Object.Session -> Field decodesTo RootMutation
createSession requiredArgs object =
    Object.selectionField "createSession" [ Argument.required "input" requiredArgs.input Api.InputObject.encodeSessionInput ] object identity


type alias CreateWordRequiredArguments =
    { input : Api.InputObject.WordInput }


{-|

  - input -

-}
createWord : CreateWordRequiredArguments -> SelectionSet decodesTo Api.Object.Word -> Field decodesTo RootMutation
createWord requiredArgs object =
    Object.selectionField "createWord" [ Argument.required "input" requiredArgs.input Api.InputObject.encodeWordInput ] object identity


type alias CompleteSessionRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
completeSession : CompleteSessionRequiredArguments -> SelectionSet decodesTo Api.Object.Session -> Field decodesTo RootMutation
completeSession requiredArgs object =
    Object.selectionField "completeSession" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object identity


type alias DeleteGameRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
deleteGame : DeleteGameRequiredArguments -> SelectionSet decodesTo Api.Object.Game -> Field (Maybe decodesTo) RootMutation
deleteGame requiredArgs object =
    Object.selectionField "deleteGame" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeletePatternRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
deletePattern : DeletePatternRequiredArguments -> SelectionSet decodesTo Api.Object.Pattern -> Field (Maybe decodesTo) RootMutation
deletePattern requiredArgs object =
    Object.selectionField "deletePattern" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteSessionRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
deleteSession : DeleteSessionRequiredArguments -> SelectionSet decodesTo Api.Object.Session -> Field (Maybe decodesTo) RootMutation
deleteSession requiredArgs object =
    Object.selectionField "deleteSession" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteWordRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
deleteWord : DeleteWordRequiredArguments -> SelectionSet decodesTo Api.Object.Word -> Field (Maybe decodesTo) RootMutation
deleteWord requiredArgs object =
    Object.selectionField "deleteWord" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias LoginRequiredArguments =
    { input : Api.InputObject.LoginInput }


{-|

  - input -

-}
login : LoginRequiredArguments -> SelectionSet decodesTo Api.Object.AuthPayload -> Field (Maybe decodesTo) RootMutation
login requiredArgs object =
    Object.selectionField "login" [ Argument.required "input" requiredArgs.input Api.InputObject.encodeLoginInput ] object (identity >> Decode.nullable)


type alias RecoverRequiredArguments =
    { input : Api.InputObject.RecoverInput }


{-|

  - input -

-}
recover : RecoverRequiredArguments -> SelectionSet decodesTo Api.Object.User -> Field (Maybe decodesTo) RootMutation
recover requiredArgs object =
    Object.selectionField "recover" [ Argument.required "input" requiredArgs.input Api.InputObject.encodeRecoverInput ] object (identity >> Decode.nullable)


type alias ResetRequiredArguments =
    { resetToken : String, input : Api.InputObject.ResetInput }


{-|

  - resetToken -
  - input -

-}
reset : ResetRequiredArguments -> SelectionSet decodesTo Api.Object.AuthPayload -> Field decodesTo RootMutation
reset requiredArgs object =
    Object.selectionField "reset" [ Argument.required "resetToken" requiredArgs.resetToken Encode.string, Argument.required "input" requiredArgs.input Api.InputObject.encodeResetInput ] object identity


type alias SignupRequiredArguments =
    { input : Api.InputObject.SignupInput }


{-|

  - input -

-}
signup : SignupRequiredArguments -> SelectionSet decodesTo Api.Object.AuthPayload -> Field (Maybe decodesTo) RootMutation
signup requiredArgs object =
    Object.selectionField "signup" [ Argument.required "input" requiredArgs.input Api.InputObject.encodeSignupInput ] object (identity >> Decode.nullable)


type alias UpdateGameRequiredArguments =
    { id : Api.Scalar.Id, input : Api.InputObject.GameInput }


{-|

  - id -
  - input -

-}
updateGame : UpdateGameRequiredArguments -> SelectionSet decodesTo Api.Object.Game -> Field (Maybe decodesTo) RootMutation
updateGame requiredArgs object =
    Object.selectionField "updateGame" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "input" requiredArgs.input Api.InputObject.encodeGameInput ] object (identity >> Decode.nullable)


type alias UpdatePatternRequiredArguments =
    { id : Api.Scalar.Id, input : Api.InputObject.PatternUpdateInput }


{-|

  - id -
  - input -

-}
updatePattern : UpdatePatternRequiredArguments -> SelectionSet decodesTo Api.Object.Pattern -> Field (Maybe decodesTo) RootMutation
updatePattern requiredArgs object =
    Object.selectionField "updatePattern" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "input" requiredArgs.input Api.InputObject.encodePatternUpdateInput ] object (identity >> Decode.nullable)


type alias UpdateSessionRequiredArguments =
    { id : Api.Scalar.Id, input : Api.InputObject.SessionUpdateInput }


{-|

  - id -
  - input -

-}
updateSession : UpdateSessionRequiredArguments -> SelectionSet decodesTo Api.Object.Session -> Field (Maybe decodesTo) RootMutation
updateSession requiredArgs object =
    Object.selectionField "updateSession" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "input" requiredArgs.input Api.InputObject.encodeSessionUpdateInput ] object (identity >> Decode.nullable)


type alias UpdateWordRequiredArguments =
    { id : Api.Scalar.Id, input : Api.InputObject.WordUpdateInput }


{-|

  - id -
  - input -

-}
updateWord : UpdateWordRequiredArguments -> SelectionSet decodesTo Api.Object.Word -> Field (Maybe decodesTo) RootMutation
updateWord requiredArgs object =
    Object.selectionField "updateWord" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "input" requiredArgs.input Api.InputObject.encodeWordUpdateInput ] object (identity >> Decode.nullable)

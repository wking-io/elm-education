-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Watchword.Mutation exposing (..)

import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Watchword.InputObject
import Watchword.Interface
import Watchword.Object
import Watchword.Scalar
import Watchword.Union


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootMutation
selection constructor =
    Object.selection constructor


type alias CreateGameRequiredArguments =
    { input : Watchword.InputObject.GameInput }


{-|

  - input -

-}
createGame : CreateGameRequiredArguments -> SelectionSet decodesTo Watchword.Object.Game -> Field decodesTo RootMutation
createGame requiredArgs object =
    Object.selectionField "createGame" [ Argument.required "input" requiredArgs.input Watchword.InputObject.encodeGameInput ] object identity


type alias CreatePatternRequiredArguments =
    { input : Watchword.InputObject.PatternInput }


{-|

  - input -

-}
createPattern : CreatePatternRequiredArguments -> SelectionSet decodesTo Watchword.Object.Pattern -> Field decodesTo RootMutation
createPattern requiredArgs object =
    Object.selectionField "createPattern" [ Argument.required "input" requiredArgs.input Watchword.InputObject.encodePatternInput ] object identity


type alias CreateSessionRequiredArguments =
    { input : Watchword.InputObject.SessionInput }


{-|

  - input -

-}
createSession : CreateSessionRequiredArguments -> SelectionSet decodesTo Watchword.Object.Session -> Field decodesTo RootMutation
createSession requiredArgs object =
    Object.selectionField "createSession" [ Argument.required "input" requiredArgs.input Watchword.InputObject.encodeSessionInput ] object identity


type alias CreateWordRequiredArguments =
    { input : Watchword.InputObject.WordInput }


{-|

  - input -

-}
createWord : CreateWordRequiredArguments -> SelectionSet decodesTo Watchword.Object.Word -> Field decodesTo RootMutation
createWord requiredArgs object =
    Object.selectionField "createWord" [ Argument.required "input" requiredArgs.input Watchword.InputObject.encodeWordInput ] object identity


type alias CompleteSessionRequiredArguments =
    { id : Watchword.Scalar.Id }


{-|

  - id -

-}
completeSession : CompleteSessionRequiredArguments -> SelectionSet decodesTo Watchword.Object.Session -> Field decodesTo RootMutation
completeSession requiredArgs object =
    Object.selectionField "completeSession" [ Argument.required "id" requiredArgs.id (\(Watchword.Scalar.Id raw) -> Encode.string raw) ] object identity


type alias DeleteGameRequiredArguments =
    { id : Watchword.Scalar.Id }


{-|

  - id -

-}
deleteGame : DeleteGameRequiredArguments -> SelectionSet decodesTo Watchword.Object.Game -> Field (Maybe decodesTo) RootMutation
deleteGame requiredArgs object =
    Object.selectionField "deleteGame" [ Argument.required "id" requiredArgs.id (\(Watchword.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeletePatternRequiredArguments =
    { id : Watchword.Scalar.Id }


{-|

  - id -

-}
deletePattern : DeletePatternRequiredArguments -> SelectionSet decodesTo Watchword.Object.Pattern -> Field (Maybe decodesTo) RootMutation
deletePattern requiredArgs object =
    Object.selectionField "deletePattern" [ Argument.required "id" requiredArgs.id (\(Watchword.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteSessionRequiredArguments =
    { id : Watchword.Scalar.Id }


{-|

  - id -

-}
deleteSession : DeleteSessionRequiredArguments -> SelectionSet decodesTo Watchword.Object.Session -> Field (Maybe decodesTo) RootMutation
deleteSession requiredArgs object =
    Object.selectionField "deleteSession" [ Argument.required "id" requiredArgs.id (\(Watchword.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias DeleteWordRequiredArguments =
    { id : Watchword.Scalar.Id }


{-|

  - id -

-}
deleteWord : DeleteWordRequiredArguments -> SelectionSet decodesTo Watchword.Object.Word -> Field (Maybe decodesTo) RootMutation
deleteWord requiredArgs object =
    Object.selectionField "deleteWord" [ Argument.required "id" requiredArgs.id (\(Watchword.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias LoginRequiredArguments =
    { input : Watchword.InputObject.LoginInput }


{-|

  - input -

-}
login : LoginRequiredArguments -> SelectionSet decodesTo Watchword.Object.AuthPayload -> Field (Maybe decodesTo) RootMutation
login requiredArgs object =
    Object.selectionField "login" [ Argument.required "input" requiredArgs.input Watchword.InputObject.encodeLoginInput ] object (identity >> Decode.nullable)


type alias RecoverRequiredArguments =
    { input : Watchword.InputObject.RecoverInput }


{-|

  - input -

-}
recover : RecoverRequiredArguments -> SelectionSet decodesTo Watchword.Object.User -> Field (Maybe decodesTo) RootMutation
recover requiredArgs object =
    Object.selectionField "recover" [ Argument.required "input" requiredArgs.input Watchword.InputObject.encodeRecoverInput ] object (identity >> Decode.nullable)


type alias ResetRequiredArguments =
    { resetToken : String, input : Watchword.InputObject.ResetInput }


{-|

  - resetToken -
  - input -

-}
reset : ResetRequiredArguments -> SelectionSet decodesTo Watchword.Object.AuthPayload -> Field decodesTo RootMutation
reset requiredArgs object =
    Object.selectionField "reset" [ Argument.required "resetToken" requiredArgs.resetToken Encode.string, Argument.required "input" requiredArgs.input Watchword.InputObject.encodeResetInput ] object identity


type alias SignupRequiredArguments =
    { input : Watchword.InputObject.SignupInput }


{-|

  - input -

-}
signup : SignupRequiredArguments -> SelectionSet decodesTo Watchword.Object.AuthPayload -> Field (Maybe decodesTo) RootMutation
signup requiredArgs object =
    Object.selectionField "signup" [ Argument.required "input" requiredArgs.input Watchword.InputObject.encodeSignupInput ] object (identity >> Decode.nullable)


type alias UpdateGameRequiredArguments =
    { id : Watchword.Scalar.Id, input : Watchword.InputObject.GameInput }


{-|

  - id -
  - input -

-}
updateGame : UpdateGameRequiredArguments -> SelectionSet decodesTo Watchword.Object.Game -> Field (Maybe decodesTo) RootMutation
updateGame requiredArgs object =
    Object.selectionField "updateGame" [ Argument.required "id" requiredArgs.id (\(Watchword.Scalar.Id raw) -> Encode.string raw), Argument.required "input" requiredArgs.input Watchword.InputObject.encodeGameInput ] object (identity >> Decode.nullable)


type alias UpdatePatternRequiredArguments =
    { id : Watchword.Scalar.Id, input : Watchword.InputObject.PatternUpdateInput }


{-|

  - id -
  - input -

-}
updatePattern : UpdatePatternRequiredArguments -> SelectionSet decodesTo Watchword.Object.Pattern -> Field (Maybe decodesTo) RootMutation
updatePattern requiredArgs object =
    Object.selectionField "updatePattern" [ Argument.required "id" requiredArgs.id (\(Watchword.Scalar.Id raw) -> Encode.string raw), Argument.required "input" requiredArgs.input Watchword.InputObject.encodePatternUpdateInput ] object (identity >> Decode.nullable)


type alias UpdateSessionRequiredArguments =
    { id : Watchword.Scalar.Id, input : Watchword.InputObject.SessionUpdateInput }


{-|

  - id -
  - input -

-}
updateSession : UpdateSessionRequiredArguments -> SelectionSet decodesTo Watchword.Object.Session -> Field (Maybe decodesTo) RootMutation
updateSession requiredArgs object =
    Object.selectionField "updateSession" [ Argument.required "id" requiredArgs.id (\(Watchword.Scalar.Id raw) -> Encode.string raw), Argument.required "input" requiredArgs.input Watchword.InputObject.encodeSessionUpdateInput ] object (identity >> Decode.nullable)


type alias UpdateWordRequiredArguments =
    { id : Watchword.Scalar.Id, input : Watchword.InputObject.WordUpdateInput }


{-|

  - id -
  - input -

-}
updateWord : UpdateWordRequiredArguments -> SelectionSet decodesTo Watchword.Object.Word -> Field (Maybe decodesTo) RootMutation
updateWord requiredArgs object =
    Object.selectionField "updateWord" [ Argument.required "id" requiredArgs.id (\(Watchword.Scalar.Id raw) -> Encode.string raw), Argument.required "input" requiredArgs.input Watchword.InputObject.encodeWordUpdateInput ] object (identity >> Decode.nullable)

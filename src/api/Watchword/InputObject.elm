-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module WatchWord.InputObject exposing (..)

import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import WatchWord.Enum.Focus
import WatchWord.Enum.FocusType
import WatchWord.Enum.PatternType
import WatchWord.Enum.UserRole
import WatchWord.Interface
import WatchWord.Object
import WatchWord.Scalar
import WatchWord.Union


buildGameInput : GameInputRequiredFields -> GameInput
buildGameInput required =
    { pattern = required.pattern, focus = required.focus, size = required.size, words = required.words, name = required.name }


type alias GameInputRequiredFields =
    { pattern : WatchWord.Enum.PatternType.PatternType, focus : WatchWord.Enum.Focus.Focus, size : Int, words : List String, name : String }


{-| Type for the GameInput input object.
-}
type alias GameInput =
    { pattern : WatchWord.Enum.PatternType.PatternType, focus : WatchWord.Enum.Focus.Focus, size : Int, words : List String, name : String }


{-| Encode a GameInput into a value that can be used as an argument.
-}
encodeGameInput : GameInput -> Value
encodeGameInput input =
    Encode.maybeObject
        [ ( "pattern", Encode.enum WatchWord.Enum.PatternType.toString input.pattern |> Just ), ( "focus", Encode.enum WatchWord.Enum.Focus.toString input.focus |> Just ), ( "size", Encode.int input.size |> Just ), ( "words", (Encode.string |> Encode.list) input.words |> Just ), ( "name", Encode.string input.name |> Just ) ]


buildGameWhereInput : (GameWhereInputOptionalFields -> GameWhereInputOptionalFields) -> GameWhereInput
buildGameWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, focus = Absent, focus_not = Absent, focus_in = Absent, focus_not_in = Absent, size = Absent, size_not = Absent, size_in = Absent, size_not_in = Absent, size_lt = Absent, size_lte = Absent, size_gt = Absent, size_gte = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, pattern = Absent, sessions_every = Absent, sessions_some = Absent, sessions_none = Absent, owner = Absent, words_every = Absent, words_some = Absent, words_none = Absent, magicalBackRelation_PatternDemo_every_ = Absent, magicalBackRelation_PatternDemo_some_ = Absent, magicalBackRelation_PatternDemo_none_ = Absent }
    in
    GameWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, focus = optionals.focus, focus_not = optionals.focus_not, focus_in = optionals.focus_in, focus_not_in = optionals.focus_not_in, size = optionals.size, size_not = optionals.size_not, size_in = optionals.size_in, size_not_in = optionals.size_not_in, size_lt = optionals.size_lt, size_lte = optionals.size_lte, size_gt = optionals.size_gt, size_gte = optionals.size_gte, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, pattern = optionals.pattern, sessions_every = optionals.sessions_every, sessions_some = optionals.sessions_some, sessions_none = optionals.sessions_none, owner = optionals.owner, words_every = optionals.words_every, words_some = optionals.words_some, words_none = optionals.words_none, magicalBackRelation_PatternDemo_every_ = optionals.magicalBackRelation_PatternDemo_every_, magicalBackRelation_PatternDemo_some_ = optionals.magicalBackRelation_PatternDemo_some_, magicalBackRelation_PatternDemo_none_ = optionals.magicalBackRelation_PatternDemo_none_ }


type alias GameWhereInputOptionalFields =
    { and : OptionalArgument (List GameWhereInput), or : OptionalArgument (List GameWhereInput), not : OptionalArgument (List GameWhereInput), id : OptionalArgument WatchWord.Scalar.Id, id_not : OptionalArgument WatchWord.Scalar.Id, id_in : OptionalArgument (List WatchWord.Scalar.Id), id_not_in : OptionalArgument (List WatchWord.Scalar.Id), id_lt : OptionalArgument WatchWord.Scalar.Id, id_lte : OptionalArgument WatchWord.Scalar.Id, id_gt : OptionalArgument WatchWord.Scalar.Id, id_gte : OptionalArgument WatchWord.Scalar.Id, id_contains : OptionalArgument WatchWord.Scalar.Id, id_not_contains : OptionalArgument WatchWord.Scalar.Id, id_starts_with : OptionalArgument WatchWord.Scalar.Id, id_not_starts_with : OptionalArgument WatchWord.Scalar.Id, id_ends_with : OptionalArgument WatchWord.Scalar.Id, id_not_ends_with : OptionalArgument WatchWord.Scalar.Id, createdAt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_not : OptionalArgument WatchWord.Scalar.DateTime, createdAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_lt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_lte : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_not : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_lt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_lte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gte : OptionalArgument WatchWord.Scalar.DateTime, focus : OptionalArgument WatchWord.Enum.Focus.Focus, focus_not : OptionalArgument WatchWord.Enum.Focus.Focus, focus_in : OptionalArgument (List WatchWord.Enum.Focus.Focus), focus_not_in : OptionalArgument (List WatchWord.Enum.Focus.Focus), size : OptionalArgument Int, size_not : OptionalArgument Int, size_in : OptionalArgument (List Int), size_not_in : OptionalArgument (List Int), size_lt : OptionalArgument Int, size_lte : OptionalArgument Int, size_gt : OptionalArgument Int, size_gte : OptionalArgument Int, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, pattern : OptionalArgument PatternWhereInput, sessions_every : OptionalArgument SessionWhereInput, sessions_some : OptionalArgument SessionWhereInput, sessions_none : OptionalArgument SessionWhereInput, owner : OptionalArgument UserWhereInput, words_every : OptionalArgument WordWhereInput, words_some : OptionalArgument WordWhereInput, words_none : OptionalArgument WordWhereInput, magicalBackRelation_PatternDemo_every_ : OptionalArgument PatternWhereInput, magicalBackRelation_PatternDemo_some_ : OptionalArgument PatternWhereInput, magicalBackRelation_PatternDemo_none_ : OptionalArgument PatternWhereInput }


{-| Type alias for the `GameWhereInput` attributes. Note that this type
needs to use the `GameWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias GameWhereInputRaw =
    { and : OptionalArgument (List GameWhereInput), or : OptionalArgument (List GameWhereInput), not : OptionalArgument (List GameWhereInput), id : OptionalArgument WatchWord.Scalar.Id, id_not : OptionalArgument WatchWord.Scalar.Id, id_in : OptionalArgument (List WatchWord.Scalar.Id), id_not_in : OptionalArgument (List WatchWord.Scalar.Id), id_lt : OptionalArgument WatchWord.Scalar.Id, id_lte : OptionalArgument WatchWord.Scalar.Id, id_gt : OptionalArgument WatchWord.Scalar.Id, id_gte : OptionalArgument WatchWord.Scalar.Id, id_contains : OptionalArgument WatchWord.Scalar.Id, id_not_contains : OptionalArgument WatchWord.Scalar.Id, id_starts_with : OptionalArgument WatchWord.Scalar.Id, id_not_starts_with : OptionalArgument WatchWord.Scalar.Id, id_ends_with : OptionalArgument WatchWord.Scalar.Id, id_not_ends_with : OptionalArgument WatchWord.Scalar.Id, createdAt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_not : OptionalArgument WatchWord.Scalar.DateTime, createdAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_lt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_lte : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_not : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_lt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_lte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gte : OptionalArgument WatchWord.Scalar.DateTime, focus : OptionalArgument WatchWord.Enum.Focus.Focus, focus_not : OptionalArgument WatchWord.Enum.Focus.Focus, focus_in : OptionalArgument (List WatchWord.Enum.Focus.Focus), focus_not_in : OptionalArgument (List WatchWord.Enum.Focus.Focus), size : OptionalArgument Int, size_not : OptionalArgument Int, size_in : OptionalArgument (List Int), size_not_in : OptionalArgument (List Int), size_lt : OptionalArgument Int, size_lte : OptionalArgument Int, size_gt : OptionalArgument Int, size_gte : OptionalArgument Int, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, pattern : OptionalArgument PatternWhereInput, sessions_every : OptionalArgument SessionWhereInput, sessions_some : OptionalArgument SessionWhereInput, sessions_none : OptionalArgument SessionWhereInput, owner : OptionalArgument UserWhereInput, words_every : OptionalArgument WordWhereInput, words_some : OptionalArgument WordWhereInput, words_none : OptionalArgument WordWhereInput, magicalBackRelation_PatternDemo_every_ : OptionalArgument PatternWhereInput, magicalBackRelation_PatternDemo_some_ : OptionalArgument PatternWhereInput, magicalBackRelation_PatternDemo_none_ : OptionalArgument PatternWhereInput }


{-| Type for the GameWhereInput input object.
-}
type GameWhereInput
    = GameWhereInput GameWhereInputRaw


{-| Encode a GameWhereInput into a value that can be used as an argument.
-}
encodeGameWhereInput : GameWhereInput -> Value
encodeGameWhereInput (GameWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeGameWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeGameWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeGameWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "focus", Encode.enum WatchWord.Enum.Focus.toString |> Encode.optional input.focus ), ( "focus_not", Encode.enum WatchWord.Enum.Focus.toString |> Encode.optional input.focus_not ), ( "focus_in", (Encode.enum WatchWord.Enum.Focus.toString |> Encode.list) |> Encode.optional input.focus_in ), ( "focus_not_in", (Encode.enum WatchWord.Enum.Focus.toString |> Encode.list) |> Encode.optional input.focus_not_in ), ( "size", Encode.int |> Encode.optional input.size ), ( "size_not", Encode.int |> Encode.optional input.size_not ), ( "size_in", (Encode.int |> Encode.list) |> Encode.optional input.size_in ), ( "size_not_in", (Encode.int |> Encode.list) |> Encode.optional input.size_not_in ), ( "size_lt", Encode.int |> Encode.optional input.size_lt ), ( "size_lte", Encode.int |> Encode.optional input.size_lte ), ( "size_gt", Encode.int |> Encode.optional input.size_gt ), ( "size_gte", Encode.int |> Encode.optional input.size_gte ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "pattern", encodePatternWhereInput |> Encode.optional input.pattern ), ( "sessions_every", encodeSessionWhereInput |> Encode.optional input.sessions_every ), ( "sessions_some", encodeSessionWhereInput |> Encode.optional input.sessions_some ), ( "sessions_none", encodeSessionWhereInput |> Encode.optional input.sessions_none ), ( "owner", encodeUserWhereInput |> Encode.optional input.owner ), ( "words_every", encodeWordWhereInput |> Encode.optional input.words_every ), ( "words_some", encodeWordWhereInput |> Encode.optional input.words_some ), ( "words_none", encodeWordWhereInput |> Encode.optional input.words_none ), ( "_MagicalBackRelation_PatternDemo_every", encodePatternWhereInput |> Encode.optional input.magicalBackRelation_PatternDemo_every_ ), ( "_MagicalBackRelation_PatternDemo_some", encodePatternWhereInput |> Encode.optional input.magicalBackRelation_PatternDemo_some_ ), ( "_MagicalBackRelation_PatternDemo_none", encodePatternWhereInput |> Encode.optional input.magicalBackRelation_PatternDemo_none_ ) ]


buildLoginInput : LoginInputRequiredFields -> LoginInput
buildLoginInput required =
    { email = required.email, password = required.password }


type alias LoginInputRequiredFields =
    { email : String, password : String }


{-| Type for the LoginInput input object.
-}
type alias LoginInput =
    { email : String, password : String }


{-| Encode a LoginInput into a value that can be used as an argument.
-}
encodeLoginInput : LoginInput -> Value
encodeLoginInput input =
    Encode.maybeObject
        [ ( "email", Encode.string input.email |> Just ), ( "password", Encode.string input.password |> Just ) ]


buildPatternInput : PatternInputRequiredFields -> PatternInput
buildPatternInput required =
    { name = required.name, description = required.description, pattern = required.pattern, focusType = required.focusType }


type alias PatternInputRequiredFields =
    { name : String, description : String, pattern : WatchWord.Enum.PatternType.PatternType, focusType : WatchWord.Enum.FocusType.FocusType }


{-| Type for the PatternInput input object.
-}
type alias PatternInput =
    { name : String, description : String, pattern : WatchWord.Enum.PatternType.PatternType, focusType : WatchWord.Enum.FocusType.FocusType }


{-| Encode a PatternInput into a value that can be used as an argument.
-}
encodePatternInput : PatternInput -> Value
encodePatternInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "description", Encode.string input.description |> Just ), ( "pattern", Encode.enum WatchWord.Enum.PatternType.toString input.pattern |> Just ), ( "focusType", Encode.enum WatchWord.Enum.FocusType.toString input.focusType |> Just ) ]


buildPatternUpdateInput : (PatternUpdateInputOptionalFields -> PatternUpdateInputOptionalFields) -> PatternUpdateInput
buildPatternUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, description = Absent, pattern = Absent, focusType = Absent }
    in
    { name = optionals.name, description = optionals.description, pattern = optionals.pattern, focusType = optionals.focusType }


type alias PatternUpdateInputOptionalFields =
    { name : OptionalArgument String, description : OptionalArgument String, pattern : OptionalArgument WatchWord.Enum.PatternType.PatternType, focusType : OptionalArgument WatchWord.Enum.FocusType.FocusType }


{-| Type for the PatternUpdateInput input object.
-}
type alias PatternUpdateInput =
    { name : OptionalArgument String, description : OptionalArgument String, pattern : OptionalArgument WatchWord.Enum.PatternType.PatternType, focusType : OptionalArgument WatchWord.Enum.FocusType.FocusType }


{-| Encode a PatternUpdateInput into a value that can be used as an argument.
-}
encodePatternUpdateInput : PatternUpdateInput -> Value
encodePatternUpdateInput input =
    Encode.maybeObject
        [ ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "pattern", Encode.enum WatchWord.Enum.PatternType.toString |> Encode.optional input.pattern ), ( "focusType", Encode.enum WatchWord.Enum.FocusType.toString |> Encode.optional input.focusType ) ]


buildPatternWhereInput : (PatternWhereInputOptionalFields -> PatternWhereInputOptionalFields) -> PatternWhereInput
buildPatternWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, description = Absent, description_not = Absent, description_in = Absent, description_not_in = Absent, description_lt = Absent, description_lte = Absent, description_gt = Absent, description_gte = Absent, description_contains = Absent, description_not_contains = Absent, description_starts_with = Absent, description_not_starts_with = Absent, description_ends_with = Absent, description_not_ends_with = Absent, pattern = Absent, pattern_not = Absent, pattern_in = Absent, pattern_not_in = Absent, focusType = Absent, focusType_not = Absent, focusType_in = Absent, focusType_not_in = Absent, games_every = Absent, games_some = Absent, games_none = Absent, demo = Absent }
    in
    PatternWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, description = optionals.description, description_not = optionals.description_not, description_in = optionals.description_in, description_not_in = optionals.description_not_in, description_lt = optionals.description_lt, description_lte = optionals.description_lte, description_gt = optionals.description_gt, description_gte = optionals.description_gte, description_contains = optionals.description_contains, description_not_contains = optionals.description_not_contains, description_starts_with = optionals.description_starts_with, description_not_starts_with = optionals.description_not_starts_with, description_ends_with = optionals.description_ends_with, description_not_ends_with = optionals.description_not_ends_with, pattern = optionals.pattern, pattern_not = optionals.pattern_not, pattern_in = optionals.pattern_in, pattern_not_in = optionals.pattern_not_in, focusType = optionals.focusType, focusType_not = optionals.focusType_not, focusType_in = optionals.focusType_in, focusType_not_in = optionals.focusType_not_in, games_every = optionals.games_every, games_some = optionals.games_some, games_none = optionals.games_none, demo = optionals.demo }


type alias PatternWhereInputOptionalFields =
    { and : OptionalArgument (List PatternWhereInput), or : OptionalArgument (List PatternWhereInput), not : OptionalArgument (List PatternWhereInput), id : OptionalArgument WatchWord.Scalar.Id, id_not : OptionalArgument WatchWord.Scalar.Id, id_in : OptionalArgument (List WatchWord.Scalar.Id), id_not_in : OptionalArgument (List WatchWord.Scalar.Id), id_lt : OptionalArgument WatchWord.Scalar.Id, id_lte : OptionalArgument WatchWord.Scalar.Id, id_gt : OptionalArgument WatchWord.Scalar.Id, id_gte : OptionalArgument WatchWord.Scalar.Id, id_contains : OptionalArgument WatchWord.Scalar.Id, id_not_contains : OptionalArgument WatchWord.Scalar.Id, id_starts_with : OptionalArgument WatchWord.Scalar.Id, id_not_starts_with : OptionalArgument WatchWord.Scalar.Id, id_ends_with : OptionalArgument WatchWord.Scalar.Id, id_not_ends_with : OptionalArgument WatchWord.Scalar.Id, createdAt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_not : OptionalArgument WatchWord.Scalar.DateTime, createdAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_lt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_lte : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_not : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_lt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_lte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gte : OptionalArgument WatchWord.Scalar.DateTime, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, description : OptionalArgument String, description_not : OptionalArgument String, description_in : OptionalArgument (List String), description_not_in : OptionalArgument (List String), description_lt : OptionalArgument String, description_lte : OptionalArgument String, description_gt : OptionalArgument String, description_gte : OptionalArgument String, description_contains : OptionalArgument String, description_not_contains : OptionalArgument String, description_starts_with : OptionalArgument String, description_not_starts_with : OptionalArgument String, description_ends_with : OptionalArgument String, description_not_ends_with : OptionalArgument String, pattern : OptionalArgument WatchWord.Enum.PatternType.PatternType, pattern_not : OptionalArgument WatchWord.Enum.PatternType.PatternType, pattern_in : OptionalArgument (List WatchWord.Enum.PatternType.PatternType), pattern_not_in : OptionalArgument (List WatchWord.Enum.PatternType.PatternType), focusType : OptionalArgument WatchWord.Enum.FocusType.FocusType, focusType_not : OptionalArgument WatchWord.Enum.FocusType.FocusType, focusType_in : OptionalArgument (List WatchWord.Enum.FocusType.FocusType), focusType_not_in : OptionalArgument (List WatchWord.Enum.FocusType.FocusType), games_every : OptionalArgument GameWhereInput, games_some : OptionalArgument GameWhereInput, games_none : OptionalArgument GameWhereInput, demo : OptionalArgument GameWhereInput }


{-| Type alias for the `PatternWhereInput` attributes. Note that this type
needs to use the `PatternWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias PatternWhereInputRaw =
    { and : OptionalArgument (List PatternWhereInput), or : OptionalArgument (List PatternWhereInput), not : OptionalArgument (List PatternWhereInput), id : OptionalArgument WatchWord.Scalar.Id, id_not : OptionalArgument WatchWord.Scalar.Id, id_in : OptionalArgument (List WatchWord.Scalar.Id), id_not_in : OptionalArgument (List WatchWord.Scalar.Id), id_lt : OptionalArgument WatchWord.Scalar.Id, id_lte : OptionalArgument WatchWord.Scalar.Id, id_gt : OptionalArgument WatchWord.Scalar.Id, id_gte : OptionalArgument WatchWord.Scalar.Id, id_contains : OptionalArgument WatchWord.Scalar.Id, id_not_contains : OptionalArgument WatchWord.Scalar.Id, id_starts_with : OptionalArgument WatchWord.Scalar.Id, id_not_starts_with : OptionalArgument WatchWord.Scalar.Id, id_ends_with : OptionalArgument WatchWord.Scalar.Id, id_not_ends_with : OptionalArgument WatchWord.Scalar.Id, createdAt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_not : OptionalArgument WatchWord.Scalar.DateTime, createdAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_lt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_lte : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_not : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_lt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_lte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gte : OptionalArgument WatchWord.Scalar.DateTime, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, description : OptionalArgument String, description_not : OptionalArgument String, description_in : OptionalArgument (List String), description_not_in : OptionalArgument (List String), description_lt : OptionalArgument String, description_lte : OptionalArgument String, description_gt : OptionalArgument String, description_gte : OptionalArgument String, description_contains : OptionalArgument String, description_not_contains : OptionalArgument String, description_starts_with : OptionalArgument String, description_not_starts_with : OptionalArgument String, description_ends_with : OptionalArgument String, description_not_ends_with : OptionalArgument String, pattern : OptionalArgument WatchWord.Enum.PatternType.PatternType, pattern_not : OptionalArgument WatchWord.Enum.PatternType.PatternType, pattern_in : OptionalArgument (List WatchWord.Enum.PatternType.PatternType), pattern_not_in : OptionalArgument (List WatchWord.Enum.PatternType.PatternType), focusType : OptionalArgument WatchWord.Enum.FocusType.FocusType, focusType_not : OptionalArgument WatchWord.Enum.FocusType.FocusType, focusType_in : OptionalArgument (List WatchWord.Enum.FocusType.FocusType), focusType_not_in : OptionalArgument (List WatchWord.Enum.FocusType.FocusType), games_every : OptionalArgument GameWhereInput, games_some : OptionalArgument GameWhereInput, games_none : OptionalArgument GameWhereInput, demo : OptionalArgument GameWhereInput }


{-| Type for the PatternWhereInput input object.
-}
type PatternWhereInput
    = PatternWhereInput PatternWhereInputRaw


{-| Encode a PatternWhereInput into a value that can be used as an argument.
-}
encodePatternWhereInput : PatternWhereInput -> Value
encodePatternWhereInput (PatternWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodePatternWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodePatternWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodePatternWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "description", Encode.string |> Encode.optional input.description ), ( "description_not", Encode.string |> Encode.optional input.description_not ), ( "description_in", (Encode.string |> Encode.list) |> Encode.optional input.description_in ), ( "description_not_in", (Encode.string |> Encode.list) |> Encode.optional input.description_not_in ), ( "description_lt", Encode.string |> Encode.optional input.description_lt ), ( "description_lte", Encode.string |> Encode.optional input.description_lte ), ( "description_gt", Encode.string |> Encode.optional input.description_gt ), ( "description_gte", Encode.string |> Encode.optional input.description_gte ), ( "description_contains", Encode.string |> Encode.optional input.description_contains ), ( "description_not_contains", Encode.string |> Encode.optional input.description_not_contains ), ( "description_starts_with", Encode.string |> Encode.optional input.description_starts_with ), ( "description_not_starts_with", Encode.string |> Encode.optional input.description_not_starts_with ), ( "description_ends_with", Encode.string |> Encode.optional input.description_ends_with ), ( "description_not_ends_with", Encode.string |> Encode.optional input.description_not_ends_with ), ( "pattern", Encode.enum WatchWord.Enum.PatternType.toString |> Encode.optional input.pattern ), ( "pattern_not", Encode.enum WatchWord.Enum.PatternType.toString |> Encode.optional input.pattern_not ), ( "pattern_in", (Encode.enum WatchWord.Enum.PatternType.toString |> Encode.list) |> Encode.optional input.pattern_in ), ( "pattern_not_in", (Encode.enum WatchWord.Enum.PatternType.toString |> Encode.list) |> Encode.optional input.pattern_not_in ), ( "focusType", Encode.enum WatchWord.Enum.FocusType.toString |> Encode.optional input.focusType ), ( "focusType_not", Encode.enum WatchWord.Enum.FocusType.toString |> Encode.optional input.focusType_not ), ( "focusType_in", (Encode.enum WatchWord.Enum.FocusType.toString |> Encode.list) |> Encode.optional input.focusType_in ), ( "focusType_not_in", (Encode.enum WatchWord.Enum.FocusType.toString |> Encode.list) |> Encode.optional input.focusType_not_in ), ( "games_every", encodeGameWhereInput |> Encode.optional input.games_every ), ( "games_some", encodeGameWhereInput |> Encode.optional input.games_some ), ( "games_none", encodeGameWhereInput |> Encode.optional input.games_none ), ( "demo", encodeGameWhereInput |> Encode.optional input.demo ) ]


buildRecoverInput : RecoverInputRequiredFields -> RecoverInput
buildRecoverInput required =
    { email = required.email }


type alias RecoverInputRequiredFields =
    { email : String }


{-| Type for the RecoverInput input object.
-}
type alias RecoverInput =
    { email : String }


{-| Encode a RecoverInput into a value that can be used as an argument.
-}
encodeRecoverInput : RecoverInput -> Value
encodeRecoverInput input =
    Encode.maybeObject
        [ ( "email", Encode.string input.email |> Just ) ]


buildResetInput : ResetInputRequiredFields -> ResetInput
buildResetInput required =
    { password = required.password, passwordConfirm = required.passwordConfirm }


type alias ResetInputRequiredFields =
    { password : String, passwordConfirm : String }


{-| Type for the ResetInput input object.
-}
type alias ResetInput =
    { password : String, passwordConfirm : String }


{-| Encode a ResetInput into a value that can be used as an argument.
-}
encodeResetInput : ResetInput -> Value
encodeResetInput input =
    Encode.maybeObject
        [ ( "password", Encode.string input.password |> Just ), ( "passwordConfirm", Encode.string input.passwordConfirm |> Just ) ]


buildSessionInput : SessionInputRequiredFields -> SessionInput
buildSessionInput required =
    { name = required.name, gameId = required.gameId }


type alias SessionInputRequiredFields =
    { name : String, gameId : String }


{-| Type for the SessionInput input object.
-}
type alias SessionInput =
    { name : String, gameId : String }


{-| Encode a SessionInput into a value that can be used as an argument.
-}
encodeSessionInput : SessionInput -> Value
encodeSessionInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "gameId", Encode.string input.gameId |> Just ) ]


buildSessionUpdateInput : (SessionUpdateInputOptionalFields -> SessionUpdateInputOptionalFields) -> SessionUpdateInput
buildSessionUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent }
    in
    { name = optionals.name }


type alias SessionUpdateInputOptionalFields =
    { name : OptionalArgument String }


{-| Type for the SessionUpdateInput input object.
-}
type alias SessionUpdateInput =
    { name : OptionalArgument String }


{-| Encode a SessionUpdateInput into a value that can be used as an argument.
-}
encodeSessionUpdateInput : SessionUpdateInput -> Value
encodeSessionUpdateInput input =
    Encode.maybeObject
        [ ( "name", Encode.string |> Encode.optional input.name ) ]


buildSessionWhereInput : (SessionWhereInputOptionalFields -> SessionWhereInputOptionalFields) -> SessionWhereInput
buildSessionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, complete = Absent, complete_not = Absent, completedAt = Absent, completedAt_not = Absent, completedAt_in = Absent, completedAt_not_in = Absent, completedAt_lt = Absent, completedAt_lte = Absent, completedAt_gt = Absent, completedAt_gte = Absent, game = Absent }
    in
    SessionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, complete = optionals.complete, complete_not = optionals.complete_not, completedAt = optionals.completedAt, completedAt_not = optionals.completedAt_not, completedAt_in = optionals.completedAt_in, completedAt_not_in = optionals.completedAt_not_in, completedAt_lt = optionals.completedAt_lt, completedAt_lte = optionals.completedAt_lte, completedAt_gt = optionals.completedAt_gt, completedAt_gte = optionals.completedAt_gte, game = optionals.game }


type alias SessionWhereInputOptionalFields =
    { and : OptionalArgument (List SessionWhereInput), or : OptionalArgument (List SessionWhereInput), not : OptionalArgument (List SessionWhereInput), id : OptionalArgument WatchWord.Scalar.Id, id_not : OptionalArgument WatchWord.Scalar.Id, id_in : OptionalArgument (List WatchWord.Scalar.Id), id_not_in : OptionalArgument (List WatchWord.Scalar.Id), id_lt : OptionalArgument WatchWord.Scalar.Id, id_lte : OptionalArgument WatchWord.Scalar.Id, id_gt : OptionalArgument WatchWord.Scalar.Id, id_gte : OptionalArgument WatchWord.Scalar.Id, id_contains : OptionalArgument WatchWord.Scalar.Id, id_not_contains : OptionalArgument WatchWord.Scalar.Id, id_starts_with : OptionalArgument WatchWord.Scalar.Id, id_not_starts_with : OptionalArgument WatchWord.Scalar.Id, id_ends_with : OptionalArgument WatchWord.Scalar.Id, id_not_ends_with : OptionalArgument WatchWord.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, createdAt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_not : OptionalArgument WatchWord.Scalar.DateTime, createdAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_lt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_lte : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_not : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_lt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_lte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gte : OptionalArgument WatchWord.Scalar.DateTime, complete : OptionalArgument Bool, complete_not : OptionalArgument Bool, completedAt : OptionalArgument WatchWord.Scalar.DateTime, completedAt_not : OptionalArgument WatchWord.Scalar.DateTime, completedAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), completedAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), completedAt_lt : OptionalArgument WatchWord.Scalar.DateTime, completedAt_lte : OptionalArgument WatchWord.Scalar.DateTime, completedAt_gt : OptionalArgument WatchWord.Scalar.DateTime, completedAt_gte : OptionalArgument WatchWord.Scalar.DateTime, game : OptionalArgument GameWhereInput }


{-| Type alias for the `SessionWhereInput` attributes. Note that this type
needs to use the `SessionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias SessionWhereInputRaw =
    { and : OptionalArgument (List SessionWhereInput), or : OptionalArgument (List SessionWhereInput), not : OptionalArgument (List SessionWhereInput), id : OptionalArgument WatchWord.Scalar.Id, id_not : OptionalArgument WatchWord.Scalar.Id, id_in : OptionalArgument (List WatchWord.Scalar.Id), id_not_in : OptionalArgument (List WatchWord.Scalar.Id), id_lt : OptionalArgument WatchWord.Scalar.Id, id_lte : OptionalArgument WatchWord.Scalar.Id, id_gt : OptionalArgument WatchWord.Scalar.Id, id_gte : OptionalArgument WatchWord.Scalar.Id, id_contains : OptionalArgument WatchWord.Scalar.Id, id_not_contains : OptionalArgument WatchWord.Scalar.Id, id_starts_with : OptionalArgument WatchWord.Scalar.Id, id_not_starts_with : OptionalArgument WatchWord.Scalar.Id, id_ends_with : OptionalArgument WatchWord.Scalar.Id, id_not_ends_with : OptionalArgument WatchWord.Scalar.Id, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, createdAt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_not : OptionalArgument WatchWord.Scalar.DateTime, createdAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_lt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_lte : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_not : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_lt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_lte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gte : OptionalArgument WatchWord.Scalar.DateTime, complete : OptionalArgument Bool, complete_not : OptionalArgument Bool, completedAt : OptionalArgument WatchWord.Scalar.DateTime, completedAt_not : OptionalArgument WatchWord.Scalar.DateTime, completedAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), completedAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), completedAt_lt : OptionalArgument WatchWord.Scalar.DateTime, completedAt_lte : OptionalArgument WatchWord.Scalar.DateTime, completedAt_gt : OptionalArgument WatchWord.Scalar.DateTime, completedAt_gte : OptionalArgument WatchWord.Scalar.DateTime, game : OptionalArgument GameWhereInput }


{-| Type for the SessionWhereInput input object.
-}
type SessionWhereInput
    = SessionWhereInput SessionWhereInputRaw


{-| Encode a SessionWhereInput into a value that can be used as an argument.
-}
encodeSessionWhereInput : SessionWhereInput -> Value
encodeSessionWhereInput (SessionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeSessionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeSessionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeSessionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "createdAt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "complete", Encode.bool |> Encode.optional input.complete ), ( "complete_not", Encode.bool |> Encode.optional input.complete_not ), ( "completedAt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.completedAt ), ( "completedAt_not", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.completedAt_not ), ( "completedAt_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.completedAt_in ), ( "completedAt_not_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.completedAt_not_in ), ( "completedAt_lt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.completedAt_lt ), ( "completedAt_lte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.completedAt_lte ), ( "completedAt_gt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.completedAt_gt ), ( "completedAt_gte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.completedAt_gte ), ( "game", encodeGameWhereInput |> Encode.optional input.game ) ]


buildSignupInput : SignupInputRequiredFields -> SignupInput
buildSignupInput required =
    { name = required.name, email = required.email, password = required.password, passwordConfirm = required.passwordConfirm }


type alias SignupInputRequiredFields =
    { name : String, email : String, password : String, passwordConfirm : String }


{-| Type for the SignupInput input object.
-}
type alias SignupInput =
    { name : String, email : String, password : String, passwordConfirm : String }


{-| Encode a SignupInput into a value that can be used as an argument.
-}
encodeSignupInput : SignupInput -> Value
encodeSignupInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "email", Encode.string input.email |> Just ), ( "password", Encode.string input.password |> Just ), ( "passwordConfirm", Encode.string input.passwordConfirm |> Just ) ]


buildUserWhereInput : (UserWhereInputOptionalFields -> UserWhereInputOptionalFields) -> UserWhereInput
buildUserWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, email = Absent, email_not = Absent, email_in = Absent, email_not_in = Absent, email_lt = Absent, email_lte = Absent, email_gt = Absent, email_gte = Absent, email_contains = Absent, email_not_contains = Absent, email_starts_with = Absent, email_not_starts_with = Absent, email_ends_with = Absent, email_not_ends_with = Absent, password = Absent, password_not = Absent, password_in = Absent, password_not_in = Absent, password_lt = Absent, password_lte = Absent, password_gt = Absent, password_gte = Absent, password_contains = Absent, password_not_contains = Absent, password_starts_with = Absent, password_not_starts_with = Absent, password_ends_with = Absent, password_not_ends_with = Absent, resetToken = Absent, resetToken_not = Absent, resetToken_in = Absent, resetToken_not_in = Absent, resetToken_lt = Absent, resetToken_lte = Absent, resetToken_gt = Absent, resetToken_gte = Absent, resetToken_contains = Absent, resetToken_not_contains = Absent, resetToken_starts_with = Absent, resetToken_not_starts_with = Absent, resetToken_ends_with = Absent, resetToken_not_ends_with = Absent, resetExpires = Absent, resetExpires_not = Absent, resetExpires_in = Absent, resetExpires_not_in = Absent, resetExpires_lt = Absent, resetExpires_lte = Absent, resetExpires_gt = Absent, resetExpires_gte = Absent, role = Absent, role_not = Absent, role_in = Absent, role_not_in = Absent, games_every = Absent, games_some = Absent, games_none = Absent }
    in
    UserWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, email = optionals.email, email_not = optionals.email_not, email_in = optionals.email_in, email_not_in = optionals.email_not_in, email_lt = optionals.email_lt, email_lte = optionals.email_lte, email_gt = optionals.email_gt, email_gte = optionals.email_gte, email_contains = optionals.email_contains, email_not_contains = optionals.email_not_contains, email_starts_with = optionals.email_starts_with, email_not_starts_with = optionals.email_not_starts_with, email_ends_with = optionals.email_ends_with, email_not_ends_with = optionals.email_not_ends_with, password = optionals.password, password_not = optionals.password_not, password_in = optionals.password_in, password_not_in = optionals.password_not_in, password_lt = optionals.password_lt, password_lte = optionals.password_lte, password_gt = optionals.password_gt, password_gte = optionals.password_gte, password_contains = optionals.password_contains, password_not_contains = optionals.password_not_contains, password_starts_with = optionals.password_starts_with, password_not_starts_with = optionals.password_not_starts_with, password_ends_with = optionals.password_ends_with, password_not_ends_with = optionals.password_not_ends_with, resetToken = optionals.resetToken, resetToken_not = optionals.resetToken_not, resetToken_in = optionals.resetToken_in, resetToken_not_in = optionals.resetToken_not_in, resetToken_lt = optionals.resetToken_lt, resetToken_lte = optionals.resetToken_lte, resetToken_gt = optionals.resetToken_gt, resetToken_gte = optionals.resetToken_gte, resetToken_contains = optionals.resetToken_contains, resetToken_not_contains = optionals.resetToken_not_contains, resetToken_starts_with = optionals.resetToken_starts_with, resetToken_not_starts_with = optionals.resetToken_not_starts_with, resetToken_ends_with = optionals.resetToken_ends_with, resetToken_not_ends_with = optionals.resetToken_not_ends_with, resetExpires = optionals.resetExpires, resetExpires_not = optionals.resetExpires_not, resetExpires_in = optionals.resetExpires_in, resetExpires_not_in = optionals.resetExpires_not_in, resetExpires_lt = optionals.resetExpires_lt, resetExpires_lte = optionals.resetExpires_lte, resetExpires_gt = optionals.resetExpires_gt, resetExpires_gte = optionals.resetExpires_gte, role = optionals.role, role_not = optionals.role_not, role_in = optionals.role_in, role_not_in = optionals.role_not_in, games_every = optionals.games_every, games_some = optionals.games_some, games_none = optionals.games_none }


type alias UserWhereInputOptionalFields =
    { and : OptionalArgument (List UserWhereInput), or : OptionalArgument (List UserWhereInput), not : OptionalArgument (List UserWhereInput), id : OptionalArgument WatchWord.Scalar.Id, id_not : OptionalArgument WatchWord.Scalar.Id, id_in : OptionalArgument (List WatchWord.Scalar.Id), id_not_in : OptionalArgument (List WatchWord.Scalar.Id), id_lt : OptionalArgument WatchWord.Scalar.Id, id_lte : OptionalArgument WatchWord.Scalar.Id, id_gt : OptionalArgument WatchWord.Scalar.Id, id_gte : OptionalArgument WatchWord.Scalar.Id, id_contains : OptionalArgument WatchWord.Scalar.Id, id_not_contains : OptionalArgument WatchWord.Scalar.Id, id_starts_with : OptionalArgument WatchWord.Scalar.Id, id_not_starts_with : OptionalArgument WatchWord.Scalar.Id, id_ends_with : OptionalArgument WatchWord.Scalar.Id, id_not_ends_with : OptionalArgument WatchWord.Scalar.Id, createdAt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_not : OptionalArgument WatchWord.Scalar.DateTime, createdAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_lt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_lte : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_not : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_lt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_lte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gte : OptionalArgument WatchWord.Scalar.DateTime, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, email : OptionalArgument String, email_not : OptionalArgument String, email_in : OptionalArgument (List String), email_not_in : OptionalArgument (List String), email_lt : OptionalArgument String, email_lte : OptionalArgument String, email_gt : OptionalArgument String, email_gte : OptionalArgument String, email_contains : OptionalArgument String, email_not_contains : OptionalArgument String, email_starts_with : OptionalArgument String, email_not_starts_with : OptionalArgument String, email_ends_with : OptionalArgument String, email_not_ends_with : OptionalArgument String, password : OptionalArgument String, password_not : OptionalArgument String, password_in : OptionalArgument (List String), password_not_in : OptionalArgument (List String), password_lt : OptionalArgument String, password_lte : OptionalArgument String, password_gt : OptionalArgument String, password_gte : OptionalArgument String, password_contains : OptionalArgument String, password_not_contains : OptionalArgument String, password_starts_with : OptionalArgument String, password_not_starts_with : OptionalArgument String, password_ends_with : OptionalArgument String, password_not_ends_with : OptionalArgument String, resetToken : OptionalArgument String, resetToken_not : OptionalArgument String, resetToken_in : OptionalArgument (List String), resetToken_not_in : OptionalArgument (List String), resetToken_lt : OptionalArgument String, resetToken_lte : OptionalArgument String, resetToken_gt : OptionalArgument String, resetToken_gte : OptionalArgument String, resetToken_contains : OptionalArgument String, resetToken_not_contains : OptionalArgument String, resetToken_starts_with : OptionalArgument String, resetToken_not_starts_with : OptionalArgument String, resetToken_ends_with : OptionalArgument String, resetToken_not_ends_with : OptionalArgument String, resetExpires : OptionalArgument WatchWord.Scalar.DateTime, resetExpires_not : OptionalArgument WatchWord.Scalar.DateTime, resetExpires_in : OptionalArgument (List WatchWord.Scalar.DateTime), resetExpires_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), resetExpires_lt : OptionalArgument WatchWord.Scalar.DateTime, resetExpires_lte : OptionalArgument WatchWord.Scalar.DateTime, resetExpires_gt : OptionalArgument WatchWord.Scalar.DateTime, resetExpires_gte : OptionalArgument WatchWord.Scalar.DateTime, role : OptionalArgument WatchWord.Enum.UserRole.UserRole, role_not : OptionalArgument WatchWord.Enum.UserRole.UserRole, role_in : OptionalArgument (List WatchWord.Enum.UserRole.UserRole), role_not_in : OptionalArgument (List WatchWord.Enum.UserRole.UserRole), games_every : OptionalArgument GameWhereInput, games_some : OptionalArgument GameWhereInput, games_none : OptionalArgument GameWhereInput }


{-| Type alias for the `UserWhereInput` attributes. Note that this type
needs to use the `UserWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias UserWhereInputRaw =
    { and : OptionalArgument (List UserWhereInput), or : OptionalArgument (List UserWhereInput), not : OptionalArgument (List UserWhereInput), id : OptionalArgument WatchWord.Scalar.Id, id_not : OptionalArgument WatchWord.Scalar.Id, id_in : OptionalArgument (List WatchWord.Scalar.Id), id_not_in : OptionalArgument (List WatchWord.Scalar.Id), id_lt : OptionalArgument WatchWord.Scalar.Id, id_lte : OptionalArgument WatchWord.Scalar.Id, id_gt : OptionalArgument WatchWord.Scalar.Id, id_gte : OptionalArgument WatchWord.Scalar.Id, id_contains : OptionalArgument WatchWord.Scalar.Id, id_not_contains : OptionalArgument WatchWord.Scalar.Id, id_starts_with : OptionalArgument WatchWord.Scalar.Id, id_not_starts_with : OptionalArgument WatchWord.Scalar.Id, id_ends_with : OptionalArgument WatchWord.Scalar.Id, id_not_ends_with : OptionalArgument WatchWord.Scalar.Id, createdAt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_not : OptionalArgument WatchWord.Scalar.DateTime, createdAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), createdAt_lt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_lte : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gt : OptionalArgument WatchWord.Scalar.DateTime, createdAt_gte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_not : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), updatedAt_lt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_lte : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gt : OptionalArgument WatchWord.Scalar.DateTime, updatedAt_gte : OptionalArgument WatchWord.Scalar.DateTime, name : OptionalArgument String, name_not : OptionalArgument String, name_in : OptionalArgument (List String), name_not_in : OptionalArgument (List String), name_lt : OptionalArgument String, name_lte : OptionalArgument String, name_gt : OptionalArgument String, name_gte : OptionalArgument String, name_contains : OptionalArgument String, name_not_contains : OptionalArgument String, name_starts_with : OptionalArgument String, name_not_starts_with : OptionalArgument String, name_ends_with : OptionalArgument String, name_not_ends_with : OptionalArgument String, email : OptionalArgument String, email_not : OptionalArgument String, email_in : OptionalArgument (List String), email_not_in : OptionalArgument (List String), email_lt : OptionalArgument String, email_lte : OptionalArgument String, email_gt : OptionalArgument String, email_gte : OptionalArgument String, email_contains : OptionalArgument String, email_not_contains : OptionalArgument String, email_starts_with : OptionalArgument String, email_not_starts_with : OptionalArgument String, email_ends_with : OptionalArgument String, email_not_ends_with : OptionalArgument String, password : OptionalArgument String, password_not : OptionalArgument String, password_in : OptionalArgument (List String), password_not_in : OptionalArgument (List String), password_lt : OptionalArgument String, password_lte : OptionalArgument String, password_gt : OptionalArgument String, password_gte : OptionalArgument String, password_contains : OptionalArgument String, password_not_contains : OptionalArgument String, password_starts_with : OptionalArgument String, password_not_starts_with : OptionalArgument String, password_ends_with : OptionalArgument String, password_not_ends_with : OptionalArgument String, resetToken : OptionalArgument String, resetToken_not : OptionalArgument String, resetToken_in : OptionalArgument (List String), resetToken_not_in : OptionalArgument (List String), resetToken_lt : OptionalArgument String, resetToken_lte : OptionalArgument String, resetToken_gt : OptionalArgument String, resetToken_gte : OptionalArgument String, resetToken_contains : OptionalArgument String, resetToken_not_contains : OptionalArgument String, resetToken_starts_with : OptionalArgument String, resetToken_not_starts_with : OptionalArgument String, resetToken_ends_with : OptionalArgument String, resetToken_not_ends_with : OptionalArgument String, resetExpires : OptionalArgument WatchWord.Scalar.DateTime, resetExpires_not : OptionalArgument WatchWord.Scalar.DateTime, resetExpires_in : OptionalArgument (List WatchWord.Scalar.DateTime), resetExpires_not_in : OptionalArgument (List WatchWord.Scalar.DateTime), resetExpires_lt : OptionalArgument WatchWord.Scalar.DateTime, resetExpires_lte : OptionalArgument WatchWord.Scalar.DateTime, resetExpires_gt : OptionalArgument WatchWord.Scalar.DateTime, resetExpires_gte : OptionalArgument WatchWord.Scalar.DateTime, role : OptionalArgument WatchWord.Enum.UserRole.UserRole, role_not : OptionalArgument WatchWord.Enum.UserRole.UserRole, role_in : OptionalArgument (List WatchWord.Enum.UserRole.UserRole), role_not_in : OptionalArgument (List WatchWord.Enum.UserRole.UserRole), games_every : OptionalArgument GameWhereInput, games_some : OptionalArgument GameWhereInput, games_none : OptionalArgument GameWhereInput }


{-| Type for the UserWhereInput input object.
-}
type UserWhereInput
    = UserWhereInput UserWhereInputRaw


{-| Encode a UserWhereInput into a value that can be used as an argument.
-}
encodeUserWhereInput : UserWhereInput -> Value
encodeUserWhereInput (UserWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeUserWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeUserWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeUserWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "email", Encode.string |> Encode.optional input.email ), ( "email_not", Encode.string |> Encode.optional input.email_not ), ( "email_in", (Encode.string |> Encode.list) |> Encode.optional input.email_in ), ( "email_not_in", (Encode.string |> Encode.list) |> Encode.optional input.email_not_in ), ( "email_lt", Encode.string |> Encode.optional input.email_lt ), ( "email_lte", Encode.string |> Encode.optional input.email_lte ), ( "email_gt", Encode.string |> Encode.optional input.email_gt ), ( "email_gte", Encode.string |> Encode.optional input.email_gte ), ( "email_contains", Encode.string |> Encode.optional input.email_contains ), ( "email_not_contains", Encode.string |> Encode.optional input.email_not_contains ), ( "email_starts_with", Encode.string |> Encode.optional input.email_starts_with ), ( "email_not_starts_with", Encode.string |> Encode.optional input.email_not_starts_with ), ( "email_ends_with", Encode.string |> Encode.optional input.email_ends_with ), ( "email_not_ends_with", Encode.string |> Encode.optional input.email_not_ends_with ), ( "password", Encode.string |> Encode.optional input.password ), ( "password_not", Encode.string |> Encode.optional input.password_not ), ( "password_in", (Encode.string |> Encode.list) |> Encode.optional input.password_in ), ( "password_not_in", (Encode.string |> Encode.list) |> Encode.optional input.password_not_in ), ( "password_lt", Encode.string |> Encode.optional input.password_lt ), ( "password_lte", Encode.string |> Encode.optional input.password_lte ), ( "password_gt", Encode.string |> Encode.optional input.password_gt ), ( "password_gte", Encode.string |> Encode.optional input.password_gte ), ( "password_contains", Encode.string |> Encode.optional input.password_contains ), ( "password_not_contains", Encode.string |> Encode.optional input.password_not_contains ), ( "password_starts_with", Encode.string |> Encode.optional input.password_starts_with ), ( "password_not_starts_with", Encode.string |> Encode.optional input.password_not_starts_with ), ( "password_ends_with", Encode.string |> Encode.optional input.password_ends_with ), ( "password_not_ends_with", Encode.string |> Encode.optional input.password_not_ends_with ), ( "resetToken", Encode.string |> Encode.optional input.resetToken ), ( "resetToken_not", Encode.string |> Encode.optional input.resetToken_not ), ( "resetToken_in", (Encode.string |> Encode.list) |> Encode.optional input.resetToken_in ), ( "resetToken_not_in", (Encode.string |> Encode.list) |> Encode.optional input.resetToken_not_in ), ( "resetToken_lt", Encode.string |> Encode.optional input.resetToken_lt ), ( "resetToken_lte", Encode.string |> Encode.optional input.resetToken_lte ), ( "resetToken_gt", Encode.string |> Encode.optional input.resetToken_gt ), ( "resetToken_gte", Encode.string |> Encode.optional input.resetToken_gte ), ( "resetToken_contains", Encode.string |> Encode.optional input.resetToken_contains ), ( "resetToken_not_contains", Encode.string |> Encode.optional input.resetToken_not_contains ), ( "resetToken_starts_with", Encode.string |> Encode.optional input.resetToken_starts_with ), ( "resetToken_not_starts_with", Encode.string |> Encode.optional input.resetToken_not_starts_with ), ( "resetToken_ends_with", Encode.string |> Encode.optional input.resetToken_ends_with ), ( "resetToken_not_ends_with", Encode.string |> Encode.optional input.resetToken_not_ends_with ), ( "resetExpires", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.resetExpires ), ( "resetExpires_not", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.resetExpires_not ), ( "resetExpires_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.resetExpires_in ), ( "resetExpires_not_in", ((\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.resetExpires_not_in ), ( "resetExpires_lt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.resetExpires_lt ), ( "resetExpires_lte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.resetExpires_lte ), ( "resetExpires_gt", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.resetExpires_gt ), ( "resetExpires_gte", (\(WatchWord.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.resetExpires_gte ), ( "role", Encode.enum WatchWord.Enum.UserRole.toString |> Encode.optional input.role ), ( "role_not", Encode.enum WatchWord.Enum.UserRole.toString |> Encode.optional input.role_not ), ( "role_in", (Encode.enum WatchWord.Enum.UserRole.toString |> Encode.list) |> Encode.optional input.role_in ), ( "role_not_in", (Encode.enum WatchWord.Enum.UserRole.toString |> Encode.list) |> Encode.optional input.role_not_in ), ( "games_every", encodeGameWhereInput |> Encode.optional input.games_every ), ( "games_some", encodeGameWhereInput |> Encode.optional input.games_some ), ( "games_none", encodeGameWhereInput |> Encode.optional input.games_none ) ]


buildWordInput : WordInputRequiredFields -> WordInput
buildWordInput required =
    { word = required.word, group = required.group, beginning = required.beginning, ending = required.ending, vowel = required.vowel }


type alias WordInputRequiredFields =
    { word : String, group : String, beginning : String, ending : String, vowel : String }


{-| Type for the WordInput input object.
-}
type alias WordInput =
    { word : String, group : String, beginning : String, ending : String, vowel : String }


{-| Encode a WordInput into a value that can be used as an argument.
-}
encodeWordInput : WordInput -> Value
encodeWordInput input =
    Encode.maybeObject
        [ ( "word", Encode.string input.word |> Just ), ( "group", Encode.string input.group |> Just ), ( "beginning", Encode.string input.beginning |> Just ), ( "ending", Encode.string input.ending |> Just ), ( "vowel", Encode.string input.vowel |> Just ) ]


buildWordUpdateInput : (WordUpdateInputOptionalFields -> WordUpdateInputOptionalFields) -> WordUpdateInput
buildWordUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { word = Absent, group = Absent, beginning = Absent, ending = Absent, vowel = Absent }
    in
    { word = optionals.word, group = optionals.group, beginning = optionals.beginning, ending = optionals.ending, vowel = optionals.vowel }


type alias WordUpdateInputOptionalFields =
    { word : OptionalArgument String, group : OptionalArgument String, beginning : OptionalArgument String, ending : OptionalArgument String, vowel : OptionalArgument String }


{-| Type for the WordUpdateInput input object.
-}
type alias WordUpdateInput =
    { word : OptionalArgument String, group : OptionalArgument String, beginning : OptionalArgument String, ending : OptionalArgument String, vowel : OptionalArgument String }


{-| Encode a WordUpdateInput into a value that can be used as an argument.
-}
encodeWordUpdateInput : WordUpdateInput -> Value
encodeWordUpdateInput input =
    Encode.maybeObject
        [ ( "word", Encode.string |> Encode.optional input.word ), ( "group", Encode.string |> Encode.optional input.group ), ( "beginning", Encode.string |> Encode.optional input.beginning ), ( "ending", Encode.string |> Encode.optional input.ending ), ( "vowel", Encode.string |> Encode.optional input.vowel ) ]


buildWordWhereInput : (WordWhereInputOptionalFields -> WordWhereInputOptionalFields) -> WordWhereInput
buildWordWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, word = Absent, word_not = Absent, word_in = Absent, word_not_in = Absent, word_lt = Absent, word_lte = Absent, word_gt = Absent, word_gte = Absent, word_contains = Absent, word_not_contains = Absent, word_starts_with = Absent, word_not_starts_with = Absent, word_ends_with = Absent, word_not_ends_with = Absent, group = Absent, group_not = Absent, group_in = Absent, group_not_in = Absent, group_lt = Absent, group_lte = Absent, group_gt = Absent, group_gte = Absent, group_contains = Absent, group_not_contains = Absent, group_starts_with = Absent, group_not_starts_with = Absent, group_ends_with = Absent, group_not_ends_with = Absent, beginning = Absent, beginning_not = Absent, beginning_in = Absent, beginning_not_in = Absent, beginning_lt = Absent, beginning_lte = Absent, beginning_gt = Absent, beginning_gte = Absent, beginning_contains = Absent, beginning_not_contains = Absent, beginning_starts_with = Absent, beginning_not_starts_with = Absent, beginning_ends_with = Absent, beginning_not_ends_with = Absent, ending = Absent, ending_not = Absent, ending_in = Absent, ending_not_in = Absent, ending_lt = Absent, ending_lte = Absent, ending_gt = Absent, ending_gte = Absent, ending_contains = Absent, ending_not_contains = Absent, ending_starts_with = Absent, ending_not_starts_with = Absent, ending_ends_with = Absent, ending_not_ends_with = Absent, vowel = Absent, vowel_not = Absent, vowel_in = Absent, vowel_not_in = Absent, vowel_lt = Absent, vowel_lte = Absent, vowel_gt = Absent, vowel_gte = Absent, vowel_contains = Absent, vowel_not_contains = Absent, vowel_starts_with = Absent, vowel_not_starts_with = Absent, vowel_ends_with = Absent, vowel_not_ends_with = Absent, games_every = Absent, games_some = Absent, games_none = Absent }
    in
    WordWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, word = optionals.word, word_not = optionals.word_not, word_in = optionals.word_in, word_not_in = optionals.word_not_in, word_lt = optionals.word_lt, word_lte = optionals.word_lte, word_gt = optionals.word_gt, word_gte = optionals.word_gte, word_contains = optionals.word_contains, word_not_contains = optionals.word_not_contains, word_starts_with = optionals.word_starts_with, word_not_starts_with = optionals.word_not_starts_with, word_ends_with = optionals.word_ends_with, word_not_ends_with = optionals.word_not_ends_with, group = optionals.group, group_not = optionals.group_not, group_in = optionals.group_in, group_not_in = optionals.group_not_in, group_lt = optionals.group_lt, group_lte = optionals.group_lte, group_gt = optionals.group_gt, group_gte = optionals.group_gte, group_contains = optionals.group_contains, group_not_contains = optionals.group_not_contains, group_starts_with = optionals.group_starts_with, group_not_starts_with = optionals.group_not_starts_with, group_ends_with = optionals.group_ends_with, group_not_ends_with = optionals.group_not_ends_with, beginning = optionals.beginning, beginning_not = optionals.beginning_not, beginning_in = optionals.beginning_in, beginning_not_in = optionals.beginning_not_in, beginning_lt = optionals.beginning_lt, beginning_lte = optionals.beginning_lte, beginning_gt = optionals.beginning_gt, beginning_gte = optionals.beginning_gte, beginning_contains = optionals.beginning_contains, beginning_not_contains = optionals.beginning_not_contains, beginning_starts_with = optionals.beginning_starts_with, beginning_not_starts_with = optionals.beginning_not_starts_with, beginning_ends_with = optionals.beginning_ends_with, beginning_not_ends_with = optionals.beginning_not_ends_with, ending = optionals.ending, ending_not = optionals.ending_not, ending_in = optionals.ending_in, ending_not_in = optionals.ending_not_in, ending_lt = optionals.ending_lt, ending_lte = optionals.ending_lte, ending_gt = optionals.ending_gt, ending_gte = optionals.ending_gte, ending_contains = optionals.ending_contains, ending_not_contains = optionals.ending_not_contains, ending_starts_with = optionals.ending_starts_with, ending_not_starts_with = optionals.ending_not_starts_with, ending_ends_with = optionals.ending_ends_with, ending_not_ends_with = optionals.ending_not_ends_with, vowel = optionals.vowel, vowel_not = optionals.vowel_not, vowel_in = optionals.vowel_in, vowel_not_in = optionals.vowel_not_in, vowel_lt = optionals.vowel_lt, vowel_lte = optionals.vowel_lte, vowel_gt = optionals.vowel_gt, vowel_gte = optionals.vowel_gte, vowel_contains = optionals.vowel_contains, vowel_not_contains = optionals.vowel_not_contains, vowel_starts_with = optionals.vowel_starts_with, vowel_not_starts_with = optionals.vowel_not_starts_with, vowel_ends_with = optionals.vowel_ends_with, vowel_not_ends_with = optionals.vowel_not_ends_with, games_every = optionals.games_every, games_some = optionals.games_some, games_none = optionals.games_none }


type alias WordWhereInputOptionalFields =
    { and : OptionalArgument (List WordWhereInput), or : OptionalArgument (List WordWhereInput), not : OptionalArgument (List WordWhereInput), id : OptionalArgument WatchWord.Scalar.Id, id_not : OptionalArgument WatchWord.Scalar.Id, id_in : OptionalArgument (List WatchWord.Scalar.Id), id_not_in : OptionalArgument (List WatchWord.Scalar.Id), id_lt : OptionalArgument WatchWord.Scalar.Id, id_lte : OptionalArgument WatchWord.Scalar.Id, id_gt : OptionalArgument WatchWord.Scalar.Id, id_gte : OptionalArgument WatchWord.Scalar.Id, id_contains : OptionalArgument WatchWord.Scalar.Id, id_not_contains : OptionalArgument WatchWord.Scalar.Id, id_starts_with : OptionalArgument WatchWord.Scalar.Id, id_not_starts_with : OptionalArgument WatchWord.Scalar.Id, id_ends_with : OptionalArgument WatchWord.Scalar.Id, id_not_ends_with : OptionalArgument WatchWord.Scalar.Id, word : OptionalArgument String, word_not : OptionalArgument String, word_in : OptionalArgument (List String), word_not_in : OptionalArgument (List String), word_lt : OptionalArgument String, word_lte : OptionalArgument String, word_gt : OptionalArgument String, word_gte : OptionalArgument String, word_contains : OptionalArgument String, word_not_contains : OptionalArgument String, word_starts_with : OptionalArgument String, word_not_starts_with : OptionalArgument String, word_ends_with : OptionalArgument String, word_not_ends_with : OptionalArgument String, group : OptionalArgument String, group_not : OptionalArgument String, group_in : OptionalArgument (List String), group_not_in : OptionalArgument (List String), group_lt : OptionalArgument String, group_lte : OptionalArgument String, group_gt : OptionalArgument String, group_gte : OptionalArgument String, group_contains : OptionalArgument String, group_not_contains : OptionalArgument String, group_starts_with : OptionalArgument String, group_not_starts_with : OptionalArgument String, group_ends_with : OptionalArgument String, group_not_ends_with : OptionalArgument String, beginning : OptionalArgument String, beginning_not : OptionalArgument String, beginning_in : OptionalArgument (List String), beginning_not_in : OptionalArgument (List String), beginning_lt : OptionalArgument String, beginning_lte : OptionalArgument String, beginning_gt : OptionalArgument String, beginning_gte : OptionalArgument String, beginning_contains : OptionalArgument String, beginning_not_contains : OptionalArgument String, beginning_starts_with : OptionalArgument String, beginning_not_starts_with : OptionalArgument String, beginning_ends_with : OptionalArgument String, beginning_not_ends_with : OptionalArgument String, ending : OptionalArgument String, ending_not : OptionalArgument String, ending_in : OptionalArgument (List String), ending_not_in : OptionalArgument (List String), ending_lt : OptionalArgument String, ending_lte : OptionalArgument String, ending_gt : OptionalArgument String, ending_gte : OptionalArgument String, ending_contains : OptionalArgument String, ending_not_contains : OptionalArgument String, ending_starts_with : OptionalArgument String, ending_not_starts_with : OptionalArgument String, ending_ends_with : OptionalArgument String, ending_not_ends_with : OptionalArgument String, vowel : OptionalArgument String, vowel_not : OptionalArgument String, vowel_in : OptionalArgument (List String), vowel_not_in : OptionalArgument (List String), vowel_lt : OptionalArgument String, vowel_lte : OptionalArgument String, vowel_gt : OptionalArgument String, vowel_gte : OptionalArgument String, vowel_contains : OptionalArgument String, vowel_not_contains : OptionalArgument String, vowel_starts_with : OptionalArgument String, vowel_not_starts_with : OptionalArgument String, vowel_ends_with : OptionalArgument String, vowel_not_ends_with : OptionalArgument String, games_every : OptionalArgument GameWhereInput, games_some : OptionalArgument GameWhereInput, games_none : OptionalArgument GameWhereInput }


{-| Type alias for the `WordWhereInput` attributes. Note that this type
needs to use the `WordWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias WordWhereInputRaw =
    { and : OptionalArgument (List WordWhereInput), or : OptionalArgument (List WordWhereInput), not : OptionalArgument (List WordWhereInput), id : OptionalArgument WatchWord.Scalar.Id, id_not : OptionalArgument WatchWord.Scalar.Id, id_in : OptionalArgument (List WatchWord.Scalar.Id), id_not_in : OptionalArgument (List WatchWord.Scalar.Id), id_lt : OptionalArgument WatchWord.Scalar.Id, id_lte : OptionalArgument WatchWord.Scalar.Id, id_gt : OptionalArgument WatchWord.Scalar.Id, id_gte : OptionalArgument WatchWord.Scalar.Id, id_contains : OptionalArgument WatchWord.Scalar.Id, id_not_contains : OptionalArgument WatchWord.Scalar.Id, id_starts_with : OptionalArgument WatchWord.Scalar.Id, id_not_starts_with : OptionalArgument WatchWord.Scalar.Id, id_ends_with : OptionalArgument WatchWord.Scalar.Id, id_not_ends_with : OptionalArgument WatchWord.Scalar.Id, word : OptionalArgument String, word_not : OptionalArgument String, word_in : OptionalArgument (List String), word_not_in : OptionalArgument (List String), word_lt : OptionalArgument String, word_lte : OptionalArgument String, word_gt : OptionalArgument String, word_gte : OptionalArgument String, word_contains : OptionalArgument String, word_not_contains : OptionalArgument String, word_starts_with : OptionalArgument String, word_not_starts_with : OptionalArgument String, word_ends_with : OptionalArgument String, word_not_ends_with : OptionalArgument String, group : OptionalArgument String, group_not : OptionalArgument String, group_in : OptionalArgument (List String), group_not_in : OptionalArgument (List String), group_lt : OptionalArgument String, group_lte : OptionalArgument String, group_gt : OptionalArgument String, group_gte : OptionalArgument String, group_contains : OptionalArgument String, group_not_contains : OptionalArgument String, group_starts_with : OptionalArgument String, group_not_starts_with : OptionalArgument String, group_ends_with : OptionalArgument String, group_not_ends_with : OptionalArgument String, beginning : OptionalArgument String, beginning_not : OptionalArgument String, beginning_in : OptionalArgument (List String), beginning_not_in : OptionalArgument (List String), beginning_lt : OptionalArgument String, beginning_lte : OptionalArgument String, beginning_gt : OptionalArgument String, beginning_gte : OptionalArgument String, beginning_contains : OptionalArgument String, beginning_not_contains : OptionalArgument String, beginning_starts_with : OptionalArgument String, beginning_not_starts_with : OptionalArgument String, beginning_ends_with : OptionalArgument String, beginning_not_ends_with : OptionalArgument String, ending : OptionalArgument String, ending_not : OptionalArgument String, ending_in : OptionalArgument (List String), ending_not_in : OptionalArgument (List String), ending_lt : OptionalArgument String, ending_lte : OptionalArgument String, ending_gt : OptionalArgument String, ending_gte : OptionalArgument String, ending_contains : OptionalArgument String, ending_not_contains : OptionalArgument String, ending_starts_with : OptionalArgument String, ending_not_starts_with : OptionalArgument String, ending_ends_with : OptionalArgument String, ending_not_ends_with : OptionalArgument String, vowel : OptionalArgument String, vowel_not : OptionalArgument String, vowel_in : OptionalArgument (List String), vowel_not_in : OptionalArgument (List String), vowel_lt : OptionalArgument String, vowel_lte : OptionalArgument String, vowel_gt : OptionalArgument String, vowel_gte : OptionalArgument String, vowel_contains : OptionalArgument String, vowel_not_contains : OptionalArgument String, vowel_starts_with : OptionalArgument String, vowel_not_starts_with : OptionalArgument String, vowel_ends_with : OptionalArgument String, vowel_not_ends_with : OptionalArgument String, games_every : OptionalArgument GameWhereInput, games_some : OptionalArgument GameWhereInput, games_none : OptionalArgument GameWhereInput }


{-| Type for the WordWhereInput input object.
-}
type WordWhereInput
    = WordWhereInput WordWhereInputRaw


{-| Encode a WordWhereInput into a value that can be used as an argument.
-}
encodeWordWhereInput : WordWhereInput -> Value
encodeWordWhereInput (WordWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeWordWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeWordWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeWordWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(WatchWord.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "word", Encode.string |> Encode.optional input.word ), ( "word_not", Encode.string |> Encode.optional input.word_not ), ( "word_in", (Encode.string |> Encode.list) |> Encode.optional input.word_in ), ( "word_not_in", (Encode.string |> Encode.list) |> Encode.optional input.word_not_in ), ( "word_lt", Encode.string |> Encode.optional input.word_lt ), ( "word_lte", Encode.string |> Encode.optional input.word_lte ), ( "word_gt", Encode.string |> Encode.optional input.word_gt ), ( "word_gte", Encode.string |> Encode.optional input.word_gte ), ( "word_contains", Encode.string |> Encode.optional input.word_contains ), ( "word_not_contains", Encode.string |> Encode.optional input.word_not_contains ), ( "word_starts_with", Encode.string |> Encode.optional input.word_starts_with ), ( "word_not_starts_with", Encode.string |> Encode.optional input.word_not_starts_with ), ( "word_ends_with", Encode.string |> Encode.optional input.word_ends_with ), ( "word_not_ends_with", Encode.string |> Encode.optional input.word_not_ends_with ), ( "group", Encode.string |> Encode.optional input.group ), ( "group_not", Encode.string |> Encode.optional input.group_not ), ( "group_in", (Encode.string |> Encode.list) |> Encode.optional input.group_in ), ( "group_not_in", (Encode.string |> Encode.list) |> Encode.optional input.group_not_in ), ( "group_lt", Encode.string |> Encode.optional input.group_lt ), ( "group_lte", Encode.string |> Encode.optional input.group_lte ), ( "group_gt", Encode.string |> Encode.optional input.group_gt ), ( "group_gte", Encode.string |> Encode.optional input.group_gte ), ( "group_contains", Encode.string |> Encode.optional input.group_contains ), ( "group_not_contains", Encode.string |> Encode.optional input.group_not_contains ), ( "group_starts_with", Encode.string |> Encode.optional input.group_starts_with ), ( "group_not_starts_with", Encode.string |> Encode.optional input.group_not_starts_with ), ( "group_ends_with", Encode.string |> Encode.optional input.group_ends_with ), ( "group_not_ends_with", Encode.string |> Encode.optional input.group_not_ends_with ), ( "beginning", Encode.string |> Encode.optional input.beginning ), ( "beginning_not", Encode.string |> Encode.optional input.beginning_not ), ( "beginning_in", (Encode.string |> Encode.list) |> Encode.optional input.beginning_in ), ( "beginning_not_in", (Encode.string |> Encode.list) |> Encode.optional input.beginning_not_in ), ( "beginning_lt", Encode.string |> Encode.optional input.beginning_lt ), ( "beginning_lte", Encode.string |> Encode.optional input.beginning_lte ), ( "beginning_gt", Encode.string |> Encode.optional input.beginning_gt ), ( "beginning_gte", Encode.string |> Encode.optional input.beginning_gte ), ( "beginning_contains", Encode.string |> Encode.optional input.beginning_contains ), ( "beginning_not_contains", Encode.string |> Encode.optional input.beginning_not_contains ), ( "beginning_starts_with", Encode.string |> Encode.optional input.beginning_starts_with ), ( "beginning_not_starts_with", Encode.string |> Encode.optional input.beginning_not_starts_with ), ( "beginning_ends_with", Encode.string |> Encode.optional input.beginning_ends_with ), ( "beginning_not_ends_with", Encode.string |> Encode.optional input.beginning_not_ends_with ), ( "ending", Encode.string |> Encode.optional input.ending ), ( "ending_not", Encode.string |> Encode.optional input.ending_not ), ( "ending_in", (Encode.string |> Encode.list) |> Encode.optional input.ending_in ), ( "ending_not_in", (Encode.string |> Encode.list) |> Encode.optional input.ending_not_in ), ( "ending_lt", Encode.string |> Encode.optional input.ending_lt ), ( "ending_lte", Encode.string |> Encode.optional input.ending_lte ), ( "ending_gt", Encode.string |> Encode.optional input.ending_gt ), ( "ending_gte", Encode.string |> Encode.optional input.ending_gte ), ( "ending_contains", Encode.string |> Encode.optional input.ending_contains ), ( "ending_not_contains", Encode.string |> Encode.optional input.ending_not_contains ), ( "ending_starts_with", Encode.string |> Encode.optional input.ending_starts_with ), ( "ending_not_starts_with", Encode.string |> Encode.optional input.ending_not_starts_with ), ( "ending_ends_with", Encode.string |> Encode.optional input.ending_ends_with ), ( "ending_not_ends_with", Encode.string |> Encode.optional input.ending_not_ends_with ), ( "vowel", Encode.string |> Encode.optional input.vowel ), ( "vowel_not", Encode.string |> Encode.optional input.vowel_not ), ( "vowel_in", (Encode.string |> Encode.list) |> Encode.optional input.vowel_in ), ( "vowel_not_in", (Encode.string |> Encode.list) |> Encode.optional input.vowel_not_in ), ( "vowel_lt", Encode.string |> Encode.optional input.vowel_lt ), ( "vowel_lte", Encode.string |> Encode.optional input.vowel_lte ), ( "vowel_gt", Encode.string |> Encode.optional input.vowel_gt ), ( "vowel_gte", Encode.string |> Encode.optional input.vowel_gte ), ( "vowel_contains", Encode.string |> Encode.optional input.vowel_contains ), ( "vowel_not_contains", Encode.string |> Encode.optional input.vowel_not_contains ), ( "vowel_starts_with", Encode.string |> Encode.optional input.vowel_starts_with ), ( "vowel_not_starts_with", Encode.string |> Encode.optional input.vowel_not_starts_with ), ( "vowel_ends_with", Encode.string |> Encode.optional input.vowel_ends_with ), ( "vowel_not_ends_with", Encode.string |> Encode.optional input.vowel_not_ends_with ), ( "games_every", encodeGameWhereInput |> Encode.optional input.games_every ), ( "games_some", encodeGameWhereInput |> Encode.optional input.games_some ), ( "games_none", encodeGameWhereInput |> Encode.optional input.games_none ) ]

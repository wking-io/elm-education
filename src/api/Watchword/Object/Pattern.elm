-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Watchword.Object.Pattern exposing (..)

import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Watchword.Enum.FocusType
import Watchword.Enum.GameOrderByInput
import Watchword.Enum.PatternType
import Watchword.InputObject
import Watchword.Interface
import Watchword.Object
import Watchword.Scalar
import Watchword.Union


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Watchword.Object.Pattern
selection constructor =
    Object.selection constructor


{-| -}
id : Field Watchword.Scalar.Id Watchword.Object.Pattern
id =
    Object.fieldDecoder "id" [] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Watchword.Scalar.Id)


{-| -}
createdAt : Field Watchword.Scalar.DateTime Watchword.Object.Pattern
createdAt =
    Object.fieldDecoder "createdAt" [] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Watchword.Scalar.DateTime)


{-| -}
updatedAt : Field Watchword.Scalar.DateTime Watchword.Object.Pattern
updatedAt =
    Object.fieldDecoder "updatedAt" [] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Watchword.Scalar.DateTime)


{-| -}
name : Field String Watchword.Object.Pattern
name =
    Object.fieldDecoder "name" [] Decode.string


{-| -}
description : Field String Watchword.Object.Pattern
description =
    Object.fieldDecoder "description" [] Decode.string


{-| -}
pattern : Field Watchword.Enum.PatternType.PatternType Watchword.Object.Pattern
pattern =
    Object.fieldDecoder "pattern" [] Watchword.Enum.PatternType.decoder


{-| -}
focusType : Field Watchword.Enum.FocusType.FocusType Watchword.Object.Pattern
focusType =
    Object.fieldDecoder "focusType" [] Watchword.Enum.FocusType.decoder


type alias GamesOptionalArguments =
    { where_ : OptionalArgument Watchword.InputObject.GameWhereInput, orderBy : OptionalArgument Watchword.Enum.GameOrderByInput.GameOrderByInput, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


{-|

  - where_ -
  - orderBy -
  - skip -
  - after -
  - before -
  - first -
  - last -

-}
games : (GamesOptionalArguments -> GamesOptionalArguments) -> SelectionSet decodesTo Watchword.Object.Game -> Field (Maybe (List decodesTo)) Watchword.Object.Pattern
games fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Watchword.InputObject.encodeGameWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Watchword.Enum.GameOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "games" optionalArgs object (identity >> Decode.list >> Decode.nullable)

-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module WatchWord.Query exposing (..)

import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import WatchWord.Enum.GameOrderByInput
import WatchWord.Enum.PatternOrderByInput
import WatchWord.Enum.PatternType
import WatchWord.Enum.SessionOrderByInput
import WatchWord.Enum.UserOrderByInput
import WatchWord.Enum.WordOrderByInput
import WatchWord.InputObject
import WatchWord.Interface
import WatchWord.Object
import WatchWord.Scalar
import WatchWord.Union


{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor


type alias GamesOptionalArguments =
    { where_ : OptionalArgument WatchWord.InputObject.GameWhereInput, orderBy : OptionalArgument WatchWord.Enum.GameOrderByInput.GameOrderByInput, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


{-|

  - where_ -
  - orderBy -
  - skip -
  - after -
  - before -
  - first -
  - last -

-}
games : (GamesOptionalArguments -> GamesOptionalArguments) -> SelectionSet decodesTo WatchWord.Object.Game -> Field (List decodesTo) RootQuery
games fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ WatchWord.InputObject.encodeGameWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum WatchWord.Enum.GameOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "games" optionalArgs object (identity >> Decode.list)


type alias GameRequiredArguments =
    { id : WatchWord.Scalar.Id }


{-|

  - id -

-}
game : GameRequiredArguments -> SelectionSet decodesTo WatchWord.Object.Game -> Field (Maybe decodesTo) RootQuery
game requiredArgs object =
    Object.selectionField "game" [ Argument.required "id" requiredArgs.id (\(WatchWord.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


{-| -}
me : SelectionSet decodesTo WatchWord.Object.User -> Field (Maybe decodesTo) RootQuery
me object =
    Object.selectionField "me" [] object (identity >> Decode.nullable)


type alias PatternsOptionalArguments =
    { where_ : OptionalArgument WatchWord.InputObject.PatternWhereInput, orderBy : OptionalArgument WatchWord.Enum.PatternOrderByInput.PatternOrderByInput, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


{-|

  - where_ -
  - orderBy -
  - skip -
  - after -
  - before -
  - first -
  - last -

-}
patterns : (PatternsOptionalArguments -> PatternsOptionalArguments) -> SelectionSet decodesTo WatchWord.Object.Pattern -> Field (List decodesTo) RootQuery
patterns fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ WatchWord.InputObject.encodePatternWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum WatchWord.Enum.PatternOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "patterns" optionalArgs object (identity >> Decode.list)


type alias PatternRequiredArguments =
    { pattern : WatchWord.Enum.PatternType.PatternType }


{-|

  - pattern -

-}
pattern : PatternRequiredArguments -> SelectionSet decodesTo WatchWord.Object.Pattern -> Field (Maybe decodesTo) RootQuery
pattern requiredArgs object =
    Object.selectionField "pattern" [ Argument.required "pattern" requiredArgs.pattern (Encode.enum WatchWord.Enum.PatternType.toString) ] object (identity >> Decode.nullable)


type alias PlayRequiredArguments =
    { id : WatchWord.Scalar.Id }


{-|

  - id -

-}
play : PlayRequiredArguments -> SelectionSet decodesTo WatchWord.Union.PlayData -> Field decodesTo RootQuery
play requiredArgs object =
    Object.selectionField "play" [ Argument.required "id" requiredArgs.id (\(WatchWord.Scalar.Id raw) -> Encode.string raw) ] object identity


type alias SessionsOptionalArguments =
    { where_ : OptionalArgument WatchWord.InputObject.SessionWhereInput, orderBy : OptionalArgument WatchWord.Enum.SessionOrderByInput.SessionOrderByInput, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


{-|

  - where_ -
  - orderBy -
  - skip -
  - after -
  - before -
  - first -
  - last -

-}
sessions : (SessionsOptionalArguments -> SessionsOptionalArguments) -> SelectionSet decodesTo WatchWord.Object.Session -> Field (List decodesTo) RootQuery
sessions fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ WatchWord.InputObject.encodeSessionWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum WatchWord.Enum.SessionOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "sessions" optionalArgs object (identity >> Decode.list)


type alias SessionRequiredArguments =
    { id : WatchWord.Scalar.Id }


{-|

  - id -

-}
session : SessionRequiredArguments -> SelectionSet decodesTo WatchWord.Object.Session -> Field (Maybe decodesTo) RootQuery
session requiredArgs object =
    Object.selectionField "session" [ Argument.required "id" requiredArgs.id (\(WatchWord.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias UsersOptionalArguments =
    { where_ : OptionalArgument WatchWord.InputObject.UserWhereInput, orderBy : OptionalArgument WatchWord.Enum.UserOrderByInput.UserOrderByInput, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


{-|

  - where_ -
  - orderBy -
  - skip -
  - after -
  - before -
  - first -
  - last -

-}
users : (UsersOptionalArguments -> UsersOptionalArguments) -> SelectionSet decodesTo WatchWord.Object.User -> Field (List decodesTo) RootQuery
users fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ WatchWord.InputObject.encodeUserWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum WatchWord.Enum.UserOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "users" optionalArgs object (identity >> Decode.list)


type alias UserRequiredArguments =
    { id : WatchWord.Scalar.Id }


{-|

  - id -

-}
user : UserRequiredArguments -> SelectionSet decodesTo WatchWord.Object.User -> Field (Maybe decodesTo) RootQuery
user requiredArgs object =
    Object.selectionField "user" [ Argument.required "id" requiredArgs.id (\(WatchWord.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias WordsOptionalArguments =
    { where_ : OptionalArgument WatchWord.InputObject.WordWhereInput, orderBy : OptionalArgument WatchWord.Enum.WordOrderByInput.WordOrderByInput, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


{-|

  - where_ -
  - orderBy -
  - skip -
  - after -
  - before -
  - first -
  - last -

-}
words : (WordsOptionalArguments -> WordsOptionalArguments) -> SelectionSet decodesTo WatchWord.Object.Word -> Field (List decodesTo) RootQuery
words fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ WatchWord.InputObject.encodeWordWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum WatchWord.Enum.WordOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "words" optionalArgs object (identity >> Decode.list)


type alias WordRequiredArguments =
    { id : WatchWord.Scalar.Id }


{-|

  - id -

-}
word : WordRequiredArguments -> SelectionSet decodesTo WatchWord.Object.Word -> Field (Maybe decodesTo) RootQuery
word requiredArgs object =
    Object.selectionField "word" [ Argument.required "id" requiredArgs.id (\(WatchWord.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)

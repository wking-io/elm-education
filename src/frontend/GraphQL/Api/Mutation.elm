-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Mutation exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootMutation
selection constructor =
    Object.selection constructor


type alias CreateGameRequiredArguments =
    { name : String, description : String, slug : String }


{-|

  - name -
  - description -
  - slug -

-}
createGame : CreateGameRequiredArguments -> SelectionSet decodesTo Api.Object.Game -> Field decodesTo RootMutation
createGame requiredArgs object =
    Object.selectionField "createGame" [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "description" requiredArgs.description Encode.string, Argument.required "slug" requiredArgs.slug Encode.string ] object identity


type alias UpdateGameRequiredArguments =
    { id : Api.Scalar.Id, name : String, description : String, slug : String }


{-|

  - id -
  - name -
  - description -
  - slug -

-}
updateGame : UpdateGameRequiredArguments -> SelectionSet decodesTo Api.Object.Game -> Field (Maybe decodesTo) RootMutation
updateGame requiredArgs object =
    Object.selectionField "updateGame" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "name" requiredArgs.name Encode.string, Argument.required "description" requiredArgs.description Encode.string, Argument.required "slug" requiredArgs.slug Encode.string ] object (identity >> Decode.nullable)


type alias DeleteGameRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
deleteGame : DeleteGameRequiredArguments -> SelectionSet decodesTo Api.Object.Game -> Field (Maybe decodesTo) RootMutation
deleteGame requiredArgs object =
    Object.selectionField "deleteGame" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias CreateExerciseRequiredArguments =
    { gameId : String }


{-|

  - gameId -

-}
createExercise : CreateExerciseRequiredArguments -> SelectionSet decodesTo Api.Object.Exercise -> Field decodesTo RootMutation
createExercise requiredArgs object =
    Object.selectionField "createExercise" [ Argument.required "gameId" requiredArgs.gameId Encode.string ] object identity


type alias CreateWordOptionalArguments =
    { ending : OptionalArgument String, vowel : OptionalArgument String }


type alias CreateWordRequiredArguments =
    { word : String, group : String, beginning : String }


{-|

  - word -
  - group -
  - beginning -
  - ending -
  - vowel -

-}
createWord : (CreateWordOptionalArguments -> CreateWordOptionalArguments) -> CreateWordRequiredArguments -> SelectionSet decodesTo Api.Object.Word -> Field decodesTo RootMutation
createWord fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { ending = Absent, vowel = Absent }

        optionalArgs =
            [ Argument.optional "ending" filledInOptionals.ending Encode.string, Argument.optional "vowel" filledInOptionals.vowel Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionField "createWord" (optionalArgs ++ [ Argument.required "word" requiredArgs.word Encode.string, Argument.required "group" requiredArgs.group Encode.string, Argument.required "beginning" requiredArgs.beginning Encode.string ]) object identity


type alias SignupRequiredArguments =
    { name : String, email : String, password : String }


{-|

  - name -
  - email -
  - password -

-}
signup : SignupRequiredArguments -> SelectionSet decodesTo Api.Object.AuthPayload -> Field (Maybe decodesTo) RootMutation
signup requiredArgs object =
    Object.selectionField "signup" [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "email" requiredArgs.email Encode.string, Argument.required "password" requiredArgs.password Encode.string ] object (identity >> Decode.nullable)


type alias LoginRequiredArguments =
    { email : String, password : String }


{-|

  - email -
  - password -

-}
login : LoginRequiredArguments -> SelectionSet decodesTo Api.Object.AuthPayload -> Field (Maybe decodesTo) RootMutation
login requiredArgs object =
    Object.selectionField "login" [ Argument.required "email" requiredArgs.email Encode.string, Argument.required "password" requiredArgs.password Encode.string ] object (identity >> Decode.nullable)

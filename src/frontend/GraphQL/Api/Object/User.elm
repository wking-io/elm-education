-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Object.User exposing (..)

import Api.Enum.ExerciseOrderByInput
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Api.Object.User
selection constructor =
    Object.selection constructor


id : Field Api.Scalar.Id Api.Object.User
id =
    Object.fieldDecoder "id" [] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.Id)


name : Field String Api.Object.User
name =
    Object.fieldDecoder "name" [] Decode.string


email : Field String Api.Object.User
email =
    Object.fieldDecoder "email" [] Decode.string


password : Field String Api.Object.User
password =
    Object.fieldDecoder "password" [] Decode.string


type alias ExercisesOptionalArguments =
    { where_ : OptionalArgument Api.InputObject.ExerciseWhereInput, orderBy : OptionalArgument Api.Enum.ExerciseOrderByInput.ExerciseOrderByInput, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


{-|

  - where_ -

-}
exercises : (ExercisesOptionalArguments -> ExercisesOptionalArguments) -> SelectionSet decodesTo Api.Object.Exercise -> Field (Maybe (List decodesTo)) Api.Object.User
exercises fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeExerciseWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.ExerciseOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "exercises" optionalArgs object (identity >> Decode.list >> Decode.nullable)

-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor


{-| -}
info : Field String RootQuery
info =
    Object.fieldDecoder "info" [] Decode.string


{-| -}
games : SelectionSet decodesTo Api.Object.Game -> Field (List decodesTo) RootQuery
games object =
    Object.selectionField "games" [] object (identity >> Decode.list)


type alias GameRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
game : GameRequiredArguments -> SelectionSet decodesTo Api.Object.Game -> Field (Maybe decodesTo) RootQuery
game requiredArgs object =
    Object.selectionField "game" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


{-| -}
users : SelectionSet decodesTo Api.Object.User -> Field (List decodesTo) RootQuery
users object =
    Object.selectionField "users" [] object (identity >> Decode.list)


type alias UserRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
user : UserRequiredArguments -> SelectionSet decodesTo Api.Object.User -> Field (Maybe decodesTo) RootQuery
user requiredArgs object =
    Object.selectionField "user" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


{-| -}
exercises : SelectionSet decodesTo Api.Object.Exercise -> Field (List decodesTo) RootQuery
exercises object =
    Object.selectionField "exercises" [] object (identity >> Decode.list)


type alias ExerciseRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
exercise : ExerciseRequiredArguments -> SelectionSet decodesTo Api.Object.Exercise -> Field (Maybe decodesTo) RootQuery
exercise requiredArgs object =
    Object.selectionField "exercise" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


{-| -}
words : SelectionSet decodesTo Api.Object.Word -> Field (List decodesTo) RootQuery
words object =
    Object.selectionField "words" [] object (identity >> Decode.list)


type alias WordRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
word : WordRequiredArguments -> SelectionSet decodesTo Api.Object.Word -> Field (Maybe decodesTo) RootQuery
word requiredArgs object =
    Object.selectionField "word" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)
